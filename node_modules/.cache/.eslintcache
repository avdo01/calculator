[{"/Users/ankora/Desktop/calculator/calculator/src/index.js":"1","/Users/ankora/Desktop/calculator/calculator/src/App.js":"2","/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"3","/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"4","/Users/ankora/Desktop/calc/calculator/src/index.js":"5","/Users/ankora/Desktop/calc/calculator/src/App.js":"6","/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"7","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"8","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js":"9","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js":"10","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js":"11"},{"size":230,"mtime":1628768444524,"results":"12","hashOfConfig":"13"},{"size":372,"mtime":1628675244409,"results":"14","hashOfConfig":"13"},{"size":4366,"mtime":1628684196613,"results":"15","hashOfConfig":"13"},{"size":1611,"mtime":1628684444292,"results":"16","hashOfConfig":"13"},{"size":291,"mtime":1632750263628,"results":"17","hashOfConfig":"18"},{"size":675,"mtime":1632838590873,"results":"19","hashOfConfig":"18"},{"size":2249,"mtime":1628867610901,"results":"20","hashOfConfig":"18"},{"size":8166,"mtime":1632319394645,"results":"21","hashOfConfig":"18"},{"size":8117,"mtime":1632997572097,"results":"22","hashOfConfig":"18"},{"size":16318,"mtime":1633013669561,"results":"23","hashOfConfig":"18"},{"size":1226,"mtime":1631693987626,"results":"24","hashOfConfig":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"decpmd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"1j7m0ep",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/ankora/Desktop/calculator/calculator/src/index.js",[],"/Users/ankora/Desktop/calculator/calculator/src/App.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["50"],"/Users/ankora/Desktop/calc/calculator/src/index.js",["51"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst target = document.querySelector(\"#react-calculator\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react-calculator')\n);",["52","53"],"/Users/ankora/Desktop/calc/calculator/src/App.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",["54","55","56","57"],"import React, { useState, useEffect } from 'react';\nimport AddExtraPayments from '../AddExtraPayments/AddExtraPayments';\nimport AmortizationSchedule from '../AmortizationSchedule/AmortizationSchedule';\nimport logo from '../photos/coolicon1.png';\nimport './amortizationCalculator.css';\n\nconst AmortizationCalculator = () => {\n    const [loanAmount, setLoanAmount] = useState();\n    const [loanYears, setLoanYears] = useState();\n    const [loanMonths, setLoanMonths] = useState();\n    const [interestRate, setInterestRate] = useState();\n    const [payment, setPayment] = useState(0);\n    const [totalInterest, setTotalInterest] = useState(0);\n    const [disabled, setDisabled] = useState(false);\n    const [amScheduleOpen, setAmScheduleOpen] = useState(false);\n    const [addMonthlyPayment, setAddMonthlyPayment] = useState(0);\n    const [everyMounthAmount, setEveryMounthAmount] = useState(0);\n    const [everyMounthName, setEveryMounthName] = useState('');\n    const [everyMounthIndex, setEveryMounthIndex] = useState(0);\n    const [oneTimeAmount, setOneTimeAmount] = useState(0);\n    const [oneTimeMonth, setOneTimeMonth] = useState(0);\n    const [oneTimeYear, setOneTimeYear] = useState(0);\n    const [isApplyed, setIsApplyed] = useState(false);\n\n    useEffect(() => {\n        if (loanAmount < 1000 || loanAmount > 999999 || loanMonths > 480 || loanYears > 40 || interestRate > 99) {\n            setDisabled(true);\n        }\n        else {\n            setDisabled(false);\n        }\n    }, [loanYears, loanMonths, loanAmount, interestRate]);\n\n    useEffect(() => {\n        setLoanMonths(loanYears * 12);\n    }, [loanYears]);\n\n    useEffect(() => {\n        setLoanYears(loanMonths / 12);\n    }, [loanMonths]);\n\n    const totalInterestt = (value, loanMonths, loanAmount) => {\n        return (value * loanMonths) - loanAmount;\n    }\n\n    const amScheduleToggle = () => {\n        setAmScheduleOpen(!amScheduleOpen);\n    }\n\n    const getDate = () => {\n        var today = new Date();\n        var date = (today.getMonth() + 1) + '/' + today.getDate() + '/' + today.getFullYear();\n        console.log(date);\n    }\n\n    const handleClick = () => {\n        var percentageRate = interestRate / 1200;\n        var lengthOfLoan = 12 * loanYears;\n        var monthlyPayment = (loanAmount * percentageRate) / (1 - (Math.pow((1 + percentageRate), lengthOfLoan * -1)));\n        if (Number.isNaN(monthlyPayment)) { setPayment(0) }\n        else { setPayment(monthlyPayment); }\n        const totals = totalInterestt(monthlyPayment, loanMonths, loanAmount);\n        setTotalInterest(totals);\n    }\n\n    return (\n        <div className='main'>\n            <div className='main-wrapper-am'>\n                <div className='left-content-am'>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan amount</h2>\n                            <input type='number' value={loanAmount} onChange={(e) => setLoanAmount(parseFloat(e.target.value))} />\n                            {loanAmount < 1000 || loanAmount > 999999 ? <div className='invalid'>Minimum value: $1000<br />Maximum value: $999999</div> : null}\n                        </div>\n                        <div className='inputs'>\n                            <h2>Loan term in years</h2>\n                            <input type='number' value={loanYears} onChange={(e) => setLoanYears(parseFloat(e.target.value))} />\n                            {loanYears > 40 ? <div className='invalid'>Maximum years: 40</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-line'>\n                        <div className='line-one' />\n                        or\n                        <div className='line-one' />\n                    </div>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan term in months</h2>\n                            <input type='number' value={loanMonths} onChange={(e) => setLoanMonths(parseFloat(e.target.value))} />\n                            {loanMonths > 480 ? <div className='invalid'>Maximum months: 480</div> : null}\n\n                        </div>\n                        <div className='inputs'>\n                            <h2>Interest rate per year</h2>\n                            <input type='number' value={interestRate} onChange={(e) => setInterestRate(parseFloat(e.target.value))} />\n                            {interestRate > 99 || interestRate < 1 ? <div className='invalid'>Minimum rate: 1<br />Maximum rate: 99</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-button'>\n                        <button disabled={disabled} onClick={() => handleClick()}>Calculate</button>\n                        {!amScheduleOpen ?\n                            <a onClick={() => amScheduleToggle()}><h2>Show amortization schedule</h2></a>\n                            :\n                            <a onClick={() => amScheduleToggle()}><h2>Hide amortization schedule</h2></a>\n                        }\n                        <img src={logo} alt='calendar-logo' />\n                    </div>\n                </div>\n                <div className='right-content-am'>\n                    <div className='right-content-first'>\n                        <div className='right-number-am'>\n                            ${payment === 0 ? 0 : payment.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}\n                        </div>\n                        <div className='right-text-am'>\n                            Monthly Payments\n                        </div>\n                    </div>\n                    <div className='right-content-second'>\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Principal Paid\n                            </div>\n                            <div className='right-totals-number'>\n                                ${loanAmount ? loanAmount.toLocaleString(undefined, { maximumFractionDigits: 0, minimumFractionDigits: 0 }) : 0}\n                            </div>\n                        </div>\n                        <div className='right-totals-line' />\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Interest Paid\n                            </div>\n                            <div className='right-totals-number' style={{ paddingLeft: '8px' }}>\n                                ${totalInterest ? totalInterest.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : 0}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <AddExtraPayments\n                setAddMonthlyPayment={setAddMonthlyPayment}\n                setEveryMounthAmount={setEveryMounthAmount}\n                setEveryMounthName={setEveryMounthName}\n                setOneTimeAmount={setOneTimeAmount}\n                setOneTimeMonth={setOneTimeMonth}\n                setOneTimeYear={setOneTimeYear}\n                setIsApplyed={setIsApplyed}\n                setEveryMounthIndex={setEveryMounthIndex}\n            />\n            {amScheduleOpen &&\n                <AmortizationSchedule\n                    loanYears={loanYears}\n                    loanMonths={loanMonths}\n                    payment={payment}\n                    interestRate={interestRate}\n                    loanAmount={loanAmount}\n                    addMonthlyPayment={addMonthlyPayment}\n                    everyMounthAmount={everyMounthAmount}\n                    everyMounthName={everyMounthName}\n                    everyMounthIndex={everyMounthIndex}\n                    oneTimeAmount={oneTimeAmount}\n                    oneTimeMonth={oneTimeMonth}\n                    oneTimeYear={oneTimeYear}\n                />\n            }\n        </div>\n    )\n}\n\nexport default AmortizationCalculator;","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js",["58","59","60","61","62","63","64"],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js",["65","66","67","68","69","70","71","72"],"/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js",[],{"ruleId":"73","severity":1,"message":"74","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"77","line":6,"column":7,"nodeType":"75","messageId":"76","endLine":6,"endColumn":13},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"73","severity":1,"message":"82","line":23,"column":12,"nodeType":"75","messageId":"76","endLine":23,"endColumn":21},{"ruleId":"73","severity":1,"message":"83","line":50,"column":11,"nodeType":"75","messageId":"76","endLine":50,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":103,"column":29,"nodeType":"86","endLine":103,"endColumn":67},{"ruleId":"84","severity":1,"message":"85","line":105,"column":29,"nodeType":"86","endLine":105,"endColumn":67},{"ruleId":"73","severity":1,"message":"74","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"87","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":23},{"ruleId":"73","severity":1,"message":"88","line":5,"column":25,"nodeType":"75","messageId":"76","endLine":5,"endColumn":37},{"ruleId":"73","severity":1,"message":"89","line":12,"column":12,"nodeType":"75","messageId":"76","endLine":12,"endColumn":28},{"ruleId":"73","severity":1,"message":"90","line":12,"column":30,"nodeType":"75","messageId":"76","endLine":12,"endColumn":49},{"ruleId":"84","severity":1,"message":"85","line":37,"column":32,"nodeType":"86","endLine":37,"endColumn":65},{"ruleId":"84","severity":1,"message":"85","line":38,"column":31,"nodeType":"86","endLine":38,"endColumn":64},{"ruleId":"73","severity":1,"message":"91","line":11,"column":11,"nodeType":"75","messageId":"76","endLine":11,"endColumn":18},{"ruleId":"73","severity":1,"message":"92","line":20,"column":9,"nodeType":"75","messageId":"76","endLine":20,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":34,"column":8,"nodeType":"95","endLine":34,"endColumn":31,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":36,"column":5,"nodeType":"75","endLine":36,"endColumn":14,"suggestions":"98"},{"ruleId":"73","severity":1,"message":"99","line":52,"column":11,"nodeType":"75","messageId":"76","endLine":52,"endColumn":23},{"ruleId":"73","severity":1,"message":"100","line":57,"column":11,"nodeType":"75","messageId":"76","endLine":57,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":235,"column":17,"nodeType":"75","messageId":"103","endLine":235,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":292,"column":40,"nodeType":"86","endLine":292,"endColumn":73},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'target' is assigned a value but never used.","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"'isApplyed' is assigned a value but never used.","'getDate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getMonthIndex' is defined but never used.","'monthsInYear' is defined but never used.","'everyMounthNameX' is assigned a value but never used.","'setEveryMounthNameX' is assigned a value but never used.","'nullVar' is assigned a value but never used.","'previousMonthIndex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addTableRows' and 'getDate'. Either include them or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect contains a call to 'setFutureDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [datesArray, yearsArray] as a second argument to the useEffect Hook.",["109"],"'currentMonth' is assigned a value but never used.","'currentYear' is assigned a value but never used.","no-redeclare","'future' is already defined.","redeclared","jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [loanYears, loanMonths, getDate, addTableRows]",{"range":"114","text":"115"},"Add dependencies array: [datesArray, yearsArray]",{"range":"116","text":"117"},[1345,1368],"[loanYears, loanMonths, getDate, addTableRows]",[1874,1874],", [datesArray, yearsArray]"]