[{"/Users/ankora/Desktop/calculator/calculator/src/index.js":"1","/Users/ankora/Desktop/calculator/calculator/src/App.js":"2","/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"3","/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"4","/Users/ankora/Desktop/calc/calculator/src/index.js":"5","/Users/ankora/Desktop/calc/calculator/src/App.js":"6","/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"7","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"8","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js":"9","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js":"10","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js":"11"},{"size":230,"mtime":1628768444524,"results":"12","hashOfConfig":"13"},{"size":372,"mtime":1628675244409,"results":"14","hashOfConfig":"13"},{"size":4366,"mtime":1628684196613,"results":"15","hashOfConfig":"13"},{"size":1611,"mtime":1628684444292,"results":"16","hashOfConfig":"13"},{"size":291,"mtime":1632750263628,"results":"17","hashOfConfig":"18"},{"size":675,"mtime":1632838590873,"results":"19","hashOfConfig":"18"},{"size":2249,"mtime":1628867610901,"results":"20","hashOfConfig":"18"},{"size":8166,"mtime":1632319394645,"results":"21","hashOfConfig":"18"},{"size":8109,"mtime":1631695710227,"results":"22","hashOfConfig":"18"},{"size":28856,"mtime":1632928344742,"results":"23","hashOfConfig":"18"},{"size":1226,"mtime":1631693987626,"results":"24","hashOfConfig":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"decpmd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"1j7m0ep",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/ankora/Desktop/calculator/calculator/src/index.js",[],"/Users/ankora/Desktop/calculator/calculator/src/App.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["51"],"/Users/ankora/Desktop/calc/calculator/src/index.js",["52"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst target = document.querySelector(\"#react-calculator\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react-calculator')\n);",["53","54"],"/Users/ankora/Desktop/calc/calculator/src/App.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",["55","56","57","58"],"import React, { useState, useEffect } from 'react';\nimport AddExtraPayments from '../AddExtraPayments/AddExtraPayments';\nimport AmortizationSchedule from '../AmortizationSchedule/AmortizationSchedule';\nimport logo from '../photos/coolicon1.png';\nimport './amortizationCalculator.css';\n\nconst AmortizationCalculator = () => {\n    const [loanAmount, setLoanAmount] = useState();\n    const [loanYears, setLoanYears] = useState();\n    const [loanMonths, setLoanMonths] = useState();\n    const [interestRate, setInterestRate] = useState();\n    const [payment, setPayment] = useState(0);\n    const [totalInterest, setTotalInterest] = useState(0);\n    const [disabled, setDisabled] = useState(false);\n    const [amScheduleOpen, setAmScheduleOpen] = useState(false);\n    const [addMonthlyPayment, setAddMonthlyPayment] = useState(0);\n    const [everyMounthAmount, setEveryMounthAmount] = useState(0);\n    const [everyMounthName, setEveryMounthName] = useState('');\n    const [everyMounthIndex, setEveryMounthIndex] = useState(0);\n    const [oneTimeAmount, setOneTimeAmount] = useState(0);\n    const [oneTimeMonth, setOneTimeMonth] = useState(0);\n    const [oneTimeYear, setOneTimeYear] = useState(0);\n    const [isApplyed, setIsApplyed] = useState(false);\n\n    useEffect(() => {\n        if (loanAmount < 1000 || loanAmount > 999999 || loanMonths > 480 || loanYears > 40 || interestRate > 99) {\n            setDisabled(true);\n        }\n        else {\n            setDisabled(false);\n        }\n    }, [loanYears, loanMonths, loanAmount, interestRate]);\n\n    useEffect(() => {\n        setLoanMonths(loanYears * 12);\n    }, [loanYears]);\n\n    useEffect(() => {\n        setLoanYears(loanMonths / 12);\n    }, [loanMonths]);\n\n    const totalInterestt = (value, loanMonths, loanAmount) => {\n        return (value * loanMonths) - loanAmount;\n    }\n\n    const amScheduleToggle = () => {\n        setAmScheduleOpen(!amScheduleOpen);\n    }\n\n    const getDate = () => {\n        var today = new Date();\n        var date = (today.getMonth() + 1) + '/' + today.getDate() + '/' + today.getFullYear();\n        console.log(date);\n    }\n\n    const handleClick = () => {\n        var percentageRate = interestRate / 1200;\n        var lengthOfLoan = 12 * loanYears;\n        var monthlyPayment = (loanAmount * percentageRate) / (1 - (Math.pow((1 + percentageRate), lengthOfLoan * -1)));\n        if (Number.isNaN(monthlyPayment)) { setPayment(0) }\n        else { setPayment(monthlyPayment); }\n        const totals = totalInterestt(monthlyPayment, loanMonths, loanAmount);\n        setTotalInterest(totals);\n    }\n\n    return (\n        <div className='main'>\n            <div className='main-wrapper-am'>\n                <div className='left-content-am'>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan amount</h2>\n                            <input type='number' value={loanAmount} onChange={(e) => setLoanAmount(parseFloat(e.target.value))} />\n                            {loanAmount < 1000 || loanAmount > 999999 ? <div className='invalid'>Minimum value: $1000<br />Maximum value: $999999</div> : null}\n                        </div>\n                        <div className='inputs'>\n                            <h2>Loan term in years</h2>\n                            <input type='number' value={loanYears} onChange={(e) => setLoanYears(parseFloat(e.target.value))} />\n                            {loanYears > 40 ? <div className='invalid'>Maximum years: 40</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-line'>\n                        <div className='line-one' />\n                        or\n                        <div className='line-one' />\n                    </div>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan term in months</h2>\n                            <input type='number' value={loanMonths} onChange={(e) => setLoanMonths(parseFloat(e.target.value))} />\n                            {loanMonths > 480 ? <div className='invalid'>Maximum months: 480</div> : null}\n\n                        </div>\n                        <div className='inputs'>\n                            <h2>Interest rate per year</h2>\n                            <input type='number' value={interestRate} onChange={(e) => setInterestRate(parseFloat(e.target.value))} />\n                            {interestRate > 99 || interestRate < 1 ? <div className='invalid'>Minimum rate: 1<br />Maximum rate: 99</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-button'>\n                        <button disabled={disabled} onClick={() => handleClick()}>Calculate</button>\n                        {!amScheduleOpen ?\n                            <a onClick={() => amScheduleToggle()}><h2>Show amortization schedule</h2></a>\n                            :\n                            <a onClick={() => amScheduleToggle()}><h2>Hide amortization schedule</h2></a>\n                        }\n                        <img src={logo} alt='calendar-logo' />\n                    </div>\n                </div>\n                <div className='right-content-am'>\n                    <div className='right-content-first'>\n                        <div className='right-number-am'>\n                            ${payment === 0 ? 0 : payment.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}\n                        </div>\n                        <div className='right-text-am'>\n                            Monthly Payments\n                        </div>\n                    </div>\n                    <div className='right-content-second'>\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Principal Paid\n                            </div>\n                            <div className='right-totals-number'>\n                                ${loanAmount ? loanAmount.toLocaleString(undefined, { maximumFractionDigits: 0, minimumFractionDigits: 0 }) : 0}\n                            </div>\n                        </div>\n                        <div className='right-totals-line' />\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Interest Paid\n                            </div>\n                            <div className='right-totals-number' style={{ paddingLeft: '8px' }}>\n                                ${totalInterest ? totalInterest.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : 0}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <AddExtraPayments\n                setAddMonthlyPayment={setAddMonthlyPayment}\n                setEveryMounthAmount={setEveryMounthAmount}\n                setEveryMounthName={setEveryMounthName}\n                setOneTimeAmount={setOneTimeAmount}\n                setOneTimeMonth={setOneTimeMonth}\n                setOneTimeYear={setOneTimeYear}\n                setIsApplyed={setIsApplyed}\n                setEveryMounthIndex={setEveryMounthIndex}\n            />\n            {amScheduleOpen &&\n                <AmortizationSchedule\n                    loanYears={loanYears}\n                    loanMonths={loanMonths}\n                    payment={payment}\n                    interestRate={interestRate}\n                    loanAmount={loanAmount}\n                    addMonthlyPayment={addMonthlyPayment}\n                    everyMounthAmount={everyMounthAmount}\n                    everyMounthName={everyMounthName}\n                    everyMounthIndex={everyMounthIndex}\n                    oneTimeAmount={oneTimeAmount}\n                    oneTimeMonth={oneTimeMonth}\n                    oneTimeYear={oneTimeYear}\n                />\n            }\n        </div>\n    )\n}\n\nexport default AmortizationCalculator;","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js",["59","60","61","62","63","64","65"],"import React, { useState, useEffect } from 'react';\nimport styles from './AddExtraPayments.module.css';\nimport plus from '../photos/plus.png';\nimport minus from '../photos/minus.png';\nimport { getMonthIndex, monthsInYear, nameOfMonths, years, currentYear } from '../Mocks/mockData';\n\nconst AddExtraPayments = ({ setAddMonthlyPayment, setEveryMounthAmount, setEveryMounthName, setOneTimeAmount, setOneTimeMonth, setOneTimeYear, setEveryMounthIndex, setIsApplyed }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [clicked, setClicked] = useState(false);\n    const [addMonthlyPaymentX, setAddMonthlyPaymentX] = useState(0);\n    const [everyMounthAmountX, setEveryMounthAmountX] = useState(0);\n    const [everyMounthNameX, setEveryMounthNameX] = useState('January');\n    const [everyMounthIndexX, setEveryMounthIndexX] = useState(0);\n    const [oneTimeAmountX, setOneTimeAmountX] = useState(0);\n    const [oneTimeMonthX, setOneTimeMonthX] = useState(0);\n    const [oneTimeYearX, setOneTimeYearX] = useState(currentYear);\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    }\n\n    return (\n        <div className={styles.mainWrapper}>\n            <div className={styles.up}>\n                <div className={styles.leftContent}>\n                    {\n                        !isOpen ?\n                            <div className={styles.leftContentText}>\n                                Add Extra Payments\n                            </div>\n                            :\n                            <div className={styles.leftContentText}>\n                                Hide Extra Payments\n                            </div>\n                    }\n                </div>\n                <div className={styles.rightContent}>\n                    {!isOpen ? <a onClick={() => handleClick()}><img className={styles.plus} src={plus} alt='plus-logo' /></a> : null}\n                    {isOpen ? <a onClick={() => handleClick()}><img className={styles.minus} src={minus} alt='minus-logo' /></a> : null}\n                </div>\n            </div>\n            {isOpen &&\n                <div className={styles.down}>\n                    <div className={styles.downText}>\n                        <div className={styles.downTextContent}>\n                            Calculate the impact of extra payments using any combination of the\n                        </div>\n                        <div className={styles.downTextContent}>\n                            inputs below. To see your new estimated payoff date, click ‘Show\n                        </div>\n                        <div className={styles.downTextContent}>\n                            amortization schedule’ link above.\n                        </div>\n                    </div>\n                    <div className={styles.downInput}>\n                        <div className={styles.inputText}>\n                            Amount to your monthly payment\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setAddMonthlyPaymentX(e.target.value);\n                                }\n                                else {\n                                    setAddMonthlyPaymentX(0);\n                                }\n                            }} />\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as an extra yearly payment occurring every:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthAmountX(e.target.value);\n                                }\n                                else {\n                                    setEveryMounthAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthIndexX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    setEveryMounthIndexX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as a one-time payment in:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeAmountX(e.target.value)\n                                }\n                                else {\n                                    setOneTimeAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeMonthX(parseFloat(e.target.value))\n                                }\n                                else {\n                                    setOneTimeMonthX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                            <select style={{ width: '80px' }} onChange={(e) => {\n                                if (e.target.value || e.target.value !== 0) {\n                                    setOneTimeYearX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    console.log('nuuulaaaa');\n                                    setOneTimeYearX(parseFloat(currentYear));\n                                }\n\n                            }}>\n                                {\n                                    years.map((year, index) => {\n                                        return (\n                                            <option key={index} value={year}>{year}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n                    <div className={styles.downButton}>\n                        <button onClick={() => {\n                            setAddMonthlyPayment(addMonthlyPaymentX);\n                            setEveryMounthAmount(everyMounthAmountX);\n                            setEveryMounthName(nameOfMonths[everyMounthIndexX]);\n                            setOneTimeAmount(oneTimeAmountX);\n                            setOneTimeMonth(oneTimeMonthX);\n                            setOneTimeYear(oneTimeYearX);\n                            setEveryMounthIndex(everyMounthIndexX);\n                            setClicked(!clicked);\n                        }}>Apply Extra Payments</button>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default AddExtraPayments;","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js",[],{"ruleId":"82","severity":1,"message":"83","line":1,"column":27,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"86","line":6,"column":7,"nodeType":"84","messageId":"85","endLine":6,"endColumn":13},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"82","severity":1,"message":"91","line":23,"column":12,"nodeType":"84","messageId":"85","endLine":23,"endColumn":21},{"ruleId":"82","severity":1,"message":"92","line":50,"column":11,"nodeType":"84","messageId":"85","endLine":50,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":103,"column":29,"nodeType":"95","endLine":103,"endColumn":67},{"ruleId":"93","severity":1,"message":"94","line":105,"column":29,"nodeType":"95","endLine":105,"endColumn":67},{"ruleId":"82","severity":1,"message":"83","line":1,"column":27,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"96","line":5,"column":10,"nodeType":"84","messageId":"85","endLine":5,"endColumn":23},{"ruleId":"82","severity":1,"message":"97","line":5,"column":25,"nodeType":"84","messageId":"85","endLine":5,"endColumn":37},{"ruleId":"82","severity":1,"message":"98","line":12,"column":12,"nodeType":"84","messageId":"85","endLine":12,"endColumn":28},{"ruleId":"82","severity":1,"message":"99","line":12,"column":30,"nodeType":"84","messageId":"85","endLine":12,"endColumn":49},{"ruleId":"93","severity":1,"message":"94","line":37,"column":32,"nodeType":"95","endLine":37,"endColumn":65},{"ruleId":"93","severity":1,"message":"94","line":38,"column":31,"nodeType":"95","endLine":38,"endColumn":64},{"ruleId":"100","severity":1,"message":"101","line":33,"column":8,"nodeType":"102","endLine":33,"endColumn":31,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":35,"column":5,"nodeType":"84","endLine":35,"endColumn":14,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":215,"column":21,"nodeType":"84","messageId":"108","endLine":215,"endColumn":32},{"ruleId":"106","severity":1,"message":"109","line":216,"column":21,"nodeType":"84","messageId":"108","endLine":216,"endColumn":34},{"ruleId":"106","severity":1,"message":"110","line":217,"column":21,"nodeType":"84","messageId":"108","endLine":217,"endColumn":33},{"ruleId":"106","severity":1,"message":"111","line":218,"column":21,"nodeType":"84","messageId":"108","endLine":218,"endColumn":38},{"ruleId":"82","severity":1,"message":"112","line":230,"column":15,"nodeType":"84","messageId":"85","endLine":230,"endColumn":29},{"ruleId":"82","severity":1,"message":"113","line":266,"column":17,"nodeType":"84","messageId":"85","endLine":266,"endColumn":29},{"ruleId":"82","severity":1,"message":"114","line":269,"column":17,"nodeType":"84","messageId":"85","endLine":269,"endColumn":35},{"ruleId":"106","severity":1,"message":"115","line":290,"column":25,"nodeType":"84","messageId":"108","endLine":290,"endColumn":37},{"ruleId":"106","severity":1,"message":"116","line":291,"column":25,"nodeType":"84","messageId":"108","endLine":291,"endColumn":42},{"ruleId":"106","severity":1,"message":"117","line":292,"column":25,"nodeType":"84","messageId":"108","endLine":292,"endColumn":36},{"ruleId":"106","severity":1,"message":"118","line":293,"column":25,"nodeType":"84","messageId":"108","endLine":293,"endColumn":38},{"ruleId":"106","severity":1,"message":"119","line":294,"column":25,"nodeType":"84","messageId":"108","endLine":294,"endColumn":36},{"ruleId":"106","severity":1,"message":"120","line":355,"column":17,"nodeType":"84","messageId":"108","endLine":355,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":412,"column":40,"nodeType":"95","endLine":412,"endColumn":73},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'target' is assigned a value but never used.","no-native-reassign",["123"],"no-negated-in-lhs",["124"],"'isApplyed' is assigned a value but never used.","'getDate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getMonthIndex' is defined but never used.","'monthsInYear' is defined but never used.","'everyMounthNameX' is assigned a value but never used.","'setEveryMounthNameX' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addTableRows' and 'getDate'. Either include them or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect contains a call to 'setFutureDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [datesArray] as a second argument to the useEffect Hook.",["126"],"no-redeclare","'lastPayment' is already defined.","redeclared","'lastPrincipal' is already defined.","'lastInterest' is already defined.","'lastTotalInterest' is already defined.","'returnToOneRow' is assigned a value but never used.","'firstPayment' is assigned a value but never used.","'firstTotalInterest' is assigned a value but never used.","'onlyInterest' is already defined.","'onlyTotalInterest' is already defined.","'onlyPayment' is already defined.","'onlyPrincipal' is already defined.","'onlyBalance' is already defined.","'future' is already defined.","jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [loanYears, loanMonths, getDate, addTableRows]",{"range":"131","text":"132"},"Add dependencies array: [datesArray]",{"range":"133","text":"134"},[1320,1343],"[loanYears, loanMonths, getDate, addTableRows]",[1687,1687],", [datesArray]"]