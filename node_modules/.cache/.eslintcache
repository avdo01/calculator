[{"/Users/ankora/Desktop/calculator/calculator/src/index.js":"1","/Users/ankora/Desktop/calculator/calculator/src/App.js":"2","/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"3","/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"4","/Users/ankora/Desktop/calc/calculator/src/index.js":"5","/Users/ankora/Desktop/calc/calculator/src/App.js":"6","/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"7","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"8","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js":"9"},{"size":230,"mtime":1628768444524,"results":"10","hashOfConfig":"11"},{"size":372,"mtime":1628675244409,"results":"12","hashOfConfig":"11"},{"size":4366,"mtime":1628684196613,"results":"13","hashOfConfig":"11"},{"size":1611,"mtime":1628684444292,"results":"14","hashOfConfig":"11"},{"size":230,"mtime":1628768444524,"results":"15","hashOfConfig":"16"},{"size":623,"mtime":1628779026798,"results":"17","hashOfConfig":"16"},{"size":2249,"mtime":1628867610901,"results":"18","hashOfConfig":"16"},{"size":5658,"mtime":1629450666123,"results":"19","hashOfConfig":"16"},{"size":5076,"mtime":1629451253721,"results":"20","hashOfConfig":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"decpmd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j7m0ep",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/ankora/Desktop/calculator/calculator/src/index.js",[],"/Users/ankora/Desktop/calculator/calculator/src/App.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["41"],"/Users/ankora/Desktop/calc/calculator/src/index.js",[],"/Users/ankora/Desktop/calc/calculator/src/App.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",["42"],"import React, { useState, useEffect } from 'react';\nimport AddExtraPayments from '../AddExtraPayments/AddExtraPayments';\nimport logo from '../photos/coolicon1.png';\nimport './amortizationCalculator.css';\n\nconst AmortizationCalculator = () => {\n    const [loanAmount, setLoanAmount] = useState();\n    const [loanYears, setLoanYears] = useState();\n    const [loanMonths, setLoanMonths] = useState();\n    const [interestRate, setInterestRate] = useState();\n    const [payment, setPayment] = useState(0);\n    const [totalInterest, setTotalInterest] = useState(0);\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => {\n        if (loanAmount < 1000 || loanAmount > 999999 || loanMonths > 480 || loanYears > 40 || interestRate > 99) {\n            setDisabled(true);\n        }\n        else {\n            setDisabled(false);\n        }\n    }, [loanYears, loanMonths, loanAmount, interestRate]);\n\n    useEffect(() => {\n        setLoanMonths(loanYears * 12);\n    }, [loanYears]);\n\n    useEffect(() => {\n        setLoanYears(loanMonths / 12);\n    }, [loanMonths]);\n\n    const totalInterestt = (value, loanMonths, loanAmount) => {\n        return (value * loanMonths) - loanAmount;\n    }\n\n    const handleClick = () => {\n        var percentageRate = interestRate / 1200;\n        var lengthOfLoan = 12 * loanYears;\n        var monthlyPayment = (loanAmount * percentageRate) / (1 - (Math.pow((1 + percentageRate), lengthOfLoan * -1)));\n        if (Number.isNaN(monthlyPayment)) { setPayment(0) }\n        else { setPayment(monthlyPayment); }\n        const totals = totalInterestt(monthlyPayment, loanMonths, loanAmount);\n        setTotalInterest(totals);\n    }\n\n    return (\n        <div className='main'>\n            <div className='main-wrapper-am'>\n                <div className='left-content-am'>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan amount</h2>\n                            <input type='number' value={loanAmount} onChange={(e) => setLoanAmount(parseFloat(e.target.value))} />\n                            {loanAmount < 1000 || loanAmount > 999999 ? <div className='invalid'>Minimum value: $1000<br />Maximum value: $999999</div> : null}\n                        </div>\n                        <div className='inputs'>\n                            <h2>Loan term in years</h2>\n                            <input type='number' value={loanYears} onChange={(e) => setLoanYears(parseFloat(e.target.value))} />\n                            {loanYears > 40 ? <div className='invalid'>Maximum years: 40</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-line'>\n                        <div className='line-one' />\n                        or\n                        <div className='line-one' />\n                    </div>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan term in months</h2>\n                            <input type='number' value={loanMonths} onChange={(e) => setLoanMonths(parseFloat(e.target.value))} />\n                            {loanMonths > 480 ? <div className='invalid'>Maximum months: 480</div> : null}\n\n                        </div>\n                        <div className='inputs'>\n                            <h2>Interest rate per year</h2>\n                            <input type='number' value={interestRate} onChange={(e) => setInterestRate(parseFloat(e.target.value))} />\n                            {interestRate > 99 || interestRate < 1 ? <div className='invalid'>Minimum rate: 1<br />Maximum rate: 99</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-button'>\n                        <button disabled={disabled} onClick={() => handleClick()}>Calculate</button>\n                        <a><h2>Show amortization schedule</h2></a>\n                        <img src={logo} alt='calendar-logo' />\n                    </div>\n                </div>\n                <div className='right-content-am'>\n                    <div className='right-content-first'>\n                        <div className='right-number-am'>\n                            ${payment === 0 ? 0 : payment.toFixed(2)}\n                        </div>\n                        <div className='right-text-am'>\n                            Monthly Payments\n                        </div>\n                    </div>\n                    <div className='right-content-second'>\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Principal Paid\n                            </div>\n                            <div className='right-totals-number'>\n                                ${loanAmount ? loanAmount : 0}\n                            </div>\n                        </div>\n                        <div className='right-totals-line' />\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Interest Paid\n                            </div>\n                            <div className='right-totals-number' style={{ paddingLeft: '8px' }}>\n                                ${totalInterest ? totalInterest.toFixed(2) : 0}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <AddExtraPayments />\n        </div>\n    )\n}\n\nexport default AmortizationCalculator;","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js",["43","44","45","46","47","48","49","50","51","52","53","54","55","56","57"],"import React, { useState, useEffect } from 'react';\nimport styles from './AddExtraPayments.module.css';\nimport plus from '../photos/plus.png';\nimport minus from '../photos/minus.png';\n\nconst AddExtraPayments = () => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const years = [2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034];\n    const [isOpen, setIsOpen] = useState(false);\n    const [amountMonthly, setAmountMonthly] = useState(0);\n    const [extraYearly, setExtraYearly] = useState(0);\n    const [extraYearlyMonth, setExtraYearlyMonth] = useState('');\n    const [oneTime, setOneTime] = useState(0);\n    const [oneTimeMonth, setOneTimeMonth] = useState(0);\n    const [oneTimeYear, setOneTimeYear] = useState(0);\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    }\n\n    return (\n        <div className={styles.mainWrapper}>\n            <div className={styles.up}>\n                <div className={styles.leftContent}>\n                    {\n                        !isOpen ?\n                            <div className={styles.leftContentText}>\n                                Add Extra Payments\n                            </div>\n                            :\n                            <div className={styles.leftContentText}>\n                                Hide Extra Payments\n                            </div>\n                    }\n                </div>\n                <div className={styles.rightContent}>\n                    {!isOpen ? <a onClick={() => handleClick()}><img className={styles.plus} src={plus} alt='plus-logo' /></a> : null}\n                    {isOpen ? <a onClick={() => handleClick()}><img className={styles.minus} src={minus} alt='minus-logo' /></a> : null}\n                </div>\n            </div>\n            {isOpen ?\n                <div className={styles.down}>\n                    <div className={styles.downText}>\n                        <div className={styles.downTextContent}>\n                            Calculate the impact of extra payments using any combination of the\n                        </div>\n                        <div className={styles.downTextContent}>\n                            inputs below. To see your new estimated payoff date, click ‘Show\n                        </div>\n                        <div className={styles.downTextContent}>\n                            amortization schedule’ link above.\n                        </div>\n                    </div>\n                    <div className={styles.downInput}>\n                        <div className={styles.inputText}>\n                            Amount to your monthly payment\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$'></input>\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as an extra yearly payment occurring every:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$'></input>\n                            <select>\n                                {\n                                    months.map(month => {\n                                        return (\n                                            <option>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as a one-time payment in:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$'></input>\n                            <select>\n                                {\n                                    months.map(month => {\n                                        return (\n                                            <option>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                            <select style={{ width: '80px' }}>\n                                {\n                                    years.map(year => {\n                                        return (\n                                            <option>{year}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n                    <div className={styles.downButton}>\n                        <button>Apply Extra Payments</button>\n                    </div>\n                </div> : null\n            }\n        </div>\n    )\n}\n\nexport default AddExtraPayments;",{"ruleId":"58","severity":1,"message":"59","line":1,"column":27,"nodeType":"60","messageId":"61","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"63","line":82,"column":25,"nodeType":"64","endLine":82,"endColumn":28},{"ruleId":"58","severity":1,"message":"59","line":1,"column":27,"nodeType":"60","messageId":"61","endLine":1,"endColumn":36},{"ruleId":"58","severity":1,"message":"65","line":10,"column":12,"nodeType":"60","messageId":"61","endLine":10,"endColumn":25},{"ruleId":"58","severity":1,"message":"66","line":10,"column":27,"nodeType":"60","messageId":"61","endLine":10,"endColumn":43},{"ruleId":"58","severity":1,"message":"67","line":11,"column":12,"nodeType":"60","messageId":"61","endLine":11,"endColumn":23},{"ruleId":"58","severity":1,"message":"68","line":11,"column":25,"nodeType":"60","messageId":"61","endLine":11,"endColumn":39},{"ruleId":"58","severity":1,"message":"69","line":12,"column":12,"nodeType":"60","messageId":"61","endLine":12,"endColumn":28},{"ruleId":"58","severity":1,"message":"70","line":12,"column":30,"nodeType":"60","messageId":"61","endLine":12,"endColumn":49},{"ruleId":"58","severity":1,"message":"71","line":13,"column":12,"nodeType":"60","messageId":"61","endLine":13,"endColumn":19},{"ruleId":"58","severity":1,"message":"72","line":13,"column":21,"nodeType":"60","messageId":"61","endLine":13,"endColumn":31},{"ruleId":"58","severity":1,"message":"73","line":14,"column":12,"nodeType":"60","messageId":"61","endLine":14,"endColumn":24},{"ruleId":"58","severity":1,"message":"74","line":14,"column":26,"nodeType":"60","messageId":"61","endLine":14,"endColumn":41},{"ruleId":"58","severity":1,"message":"75","line":15,"column":12,"nodeType":"60","messageId":"61","endLine":15,"endColumn":23},{"ruleId":"58","severity":1,"message":"76","line":15,"column":25,"nodeType":"60","messageId":"61","endLine":15,"endColumn":39},{"ruleId":"62","severity":1,"message":"63","line":36,"column":32,"nodeType":"64","endLine":36,"endColumn":65},{"ruleId":"62","severity":1,"message":"63","line":37,"column":31,"nodeType":"64","endLine":37,"endColumn":64},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'amountMonthly' is assigned a value but never used.","'setAmountMonthly' is assigned a value but never used.","'extraYearly' is assigned a value but never used.","'setExtraYearly' is assigned a value but never used.","'extraYearlyMonth' is assigned a value but never used.","'setExtraYearlyMonth' is assigned a value but never used.","'oneTime' is assigned a value but never used.","'setOneTime' is assigned a value but never used.","'oneTimeMonth' is assigned a value but never used.","'setOneTimeMonth' is assigned a value but never used.","'oneTimeYear' is assigned a value but never used.","'setOneTimeYear' is assigned a value but never used."]