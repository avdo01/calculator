[{"/Users/ankora/Desktop/calculator/calculator/src/index.js":"1","/Users/ankora/Desktop/calculator/calculator/src/App.js":"2","/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"3","/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"4","/Users/ankora/Desktop/calc/calculator/src/index.js":"5","/Users/ankora/Desktop/calc/calculator/src/App.js":"6","/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"7","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"8","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js":"9","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js":"10","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js":"11"},{"size":230,"mtime":1628768444524,"results":"12","hashOfConfig":"13"},{"size":372,"mtime":1628675244409,"results":"14","hashOfConfig":"13"},{"size":4366,"mtime":1628684196613,"results":"15","hashOfConfig":"13"},{"size":1611,"mtime":1628684444292,"results":"16","hashOfConfig":"13"},{"size":230,"mtime":1628768444524,"results":"17","hashOfConfig":"18"},{"size":623,"mtime":1628779026798,"results":"19","hashOfConfig":"18"},{"size":2249,"mtime":1628867610901,"results":"20","hashOfConfig":"18"},{"size":8000,"mtime":1631630752150,"results":"21","hashOfConfig":"18"},{"size":8109,"mtime":1631695710227,"results":"22","hashOfConfig":"18"},{"size":13187,"mtime":1632150883582,"results":"23","hashOfConfig":"18"},{"size":1226,"mtime":1631693987626,"results":"24","hashOfConfig":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"decpmd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1j7m0ep",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/Users/ankora/Desktop/calculator/calculator/src/index.js",[],"/Users/ankora/Desktop/calculator/calculator/src/App.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["51"],"/Users/ankora/Desktop/calc/calculator/src/index.js",[],["52","53"],"/Users/ankora/Desktop/calc/calculator/src/App.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",["54","55","56","57","58"],"import React, { useState, useEffect } from 'react';\nimport AddExtraPayments from '../AddExtraPayments/AddExtraPayments';\nimport AmortizationSchedule from '../AmortizationSchedule/AmortizationSchedule';\nimport logo from '../photos/coolicon1.png';\nimport './amortizationCalculator.css';\nimport { getNumberOfTableRows } from '../Mocks/mockData';\n\nconst AmortizationCalculator = () => {\n    const [loanAmount, setLoanAmount] = useState();\n    const [loanYears, setLoanYears] = useState();\n    const [loanMonths, setLoanMonths] = useState();\n    const [interestRate, setInterestRate] = useState();\n    const [payment, setPayment] = useState(0);\n    const [totalInterest, setTotalInterest] = useState(0);\n    const [disabled, setDisabled] = useState(false);\n    const [amScheduleOpen, setAmScheduleOpen] = useState(false);\n    const [addMonthlyPayment, setAddMonthlyPayment] = useState(0);\n    const [everyMounthAmount, setEveryMounthAmount] = useState(0);\n    const [everyMounthName, setEveryMounthName] = useState('');\n    const [everyMounthIndex, setEveryMounthIndex] = useState(0);\n    const [oneTimeAmount, setOneTimeAmount] = useState(0);\n    const [oneTimeMonth, setOneTimeMonth] = useState(0);\n    const [oneTimeYear, setOneTimeYear] = useState(0);\n    const [isApplyed, setIsApplyed] = useState(false);\n\n    useEffect(() => {\n        if (loanAmount < 1000 || loanAmount > 999999 || loanMonths > 480 || loanYears > 40 || interestRate > 99) {\n            setDisabled(true);\n        }\n        else {\n            setDisabled(false);\n        }\n    }, [loanYears, loanMonths, loanAmount, interestRate]);\n\n    useEffect(() => {\n        setLoanMonths(loanYears * 12);\n    }, [loanYears]);\n\n    useEffect(() => {\n        setLoanYears(loanMonths / 12);\n    }, [loanMonths]);\n\n    const totalInterestt = (value, loanMonths, loanAmount) => {\n        return (value * loanMonths) - loanAmount;\n    }\n\n    const amScheduleToggle = () => {\n        setAmScheduleOpen(!amScheduleOpen);\n    }\n\n    const getDate = () => {\n        var today = new Date();\n        var date = (today.getMonth() + 1) + '/' + today.getDate() + '/' + today.getFullYear();\n        console.log(date);\n    }\n\n    const handleClick = () => {\n        var percentageRate = interestRate / 1200;\n        var lengthOfLoan = 12 * loanYears;\n        var monthlyPayment = (loanAmount * percentageRate) / (1 - (Math.pow((1 + percentageRate), lengthOfLoan * -1)));\n        if (Number.isNaN(monthlyPayment)) { setPayment(0) }\n        else { setPayment(monthlyPayment); }\n        const totals = totalInterestt(monthlyPayment, loanMonths, loanAmount);\n        setTotalInterest(totals);\n    }\n\n    return (\n        <div className='main'>\n            <div className='main-wrapper-am'>\n                <div className='left-content-am'>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan amount</h2>\n                            <input type='number' value={loanAmount} onChange={(e) => setLoanAmount(parseFloat(e.target.value))} />\n                            {loanAmount < 1000 || loanAmount > 999999 ? <div className='invalid'>Minimum value: $1000<br />Maximum value: $999999</div> : null}\n                        </div>\n                        <div className='inputs'>\n                            <h2>Loan term in years</h2>\n                            <input type='number' value={loanYears} onChange={(e) => setLoanYears(parseFloat(e.target.value))} />\n                            {loanYears > 40 ? <div className='invalid'>Maximum years: 40</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-line'>\n                        <div className='line-one' />\n                        or\n                        <div className='line-one' />\n                    </div>\n                    <div className='left-am-input'>\n                        <div className='inputs'>\n                            <h2>Loan term in months</h2>\n                            <input type='number' value={loanMonths} onChange={(e) => setLoanMonths(parseFloat(e.target.value))} />\n                            {loanMonths > 480 ? <div className='invalid'>Maximum months: 480</div> : null}\n\n                        </div>\n                        <div className='inputs'>\n                            <h2>Interest rate per year</h2>\n                            <input type='number' value={interestRate} onChange={(e) => setInterestRate(parseFloat(e.target.value))} />\n                            {interestRate > 99 || interestRate < 1 ? <div className='invalid'>Minimum rate: 1<br />Maximum rate: 99</div> : null}\n                        </div>\n                    </div>\n                    <div className='left-am-button'>\n                        <button disabled={disabled} onClick={() => handleClick()}>Calculate</button>\n                        {!amScheduleOpen ?\n                            <a onClick={() => amScheduleToggle()}><h2>Show amortization schedule</h2></a>\n                            :\n                            <a onClick={() => amScheduleToggle()}><h2>Hide amortization schedule</h2></a>\n                        }\n                        <img src={logo} alt='calendar-logo' />\n                    </div>\n                </div>\n                <div className='right-content-am'>\n                    <div className='right-content-first'>\n                        <div className='right-number-am'>\n                            ${payment === 0 ? 0 : payment.toFixed(2)}\n                        </div>\n                        <div className='right-text-am'>\n                            Monthly Payments\n                        </div>\n                    </div>\n                    <div className='right-content-second'>\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Principal Paid\n                            </div>\n                            <div className='right-totals-number'>\n                                ${loanAmount ? loanAmount : 0}\n                            </div>\n                        </div>\n                        <div className='right-totals-line' />\n                        <div className='right-totals'>\n                            <div className='right-totals-text'>\n                                Total Interest Paid\n                            </div>\n                            <div className='right-totals-number' style={{ paddingLeft: '8px' }}>\n                                ${totalInterest ? totalInterest.toFixed(2) : 0}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <AddExtraPayments\n                setAddMonthlyPayment={setAddMonthlyPayment}\n                setEveryMounthAmount={setEveryMounthAmount}\n                setEveryMounthName={setEveryMounthName}\n                setOneTimeAmount={setOneTimeAmount}\n                setOneTimeMonth={setOneTimeMonth}\n                setOneTimeYear={setOneTimeYear}\n                setIsApplyed={setIsApplyed}\n                setEveryMounthIndex={setEveryMounthIndex}\n            />\n            {amScheduleOpen &&\n                <AmortizationSchedule\n                    loanYears={loanYears}\n                    loanMonths={loanMonths}\n                    payment={payment}\n                    interestRate={interestRate}\n                    loanAmount={loanAmount}\n                    addMonthlyPayment={addMonthlyPayment}\n                    everyMounthAmount={everyMounthAmount}\n                    everyMounthName={everyMounthName}\n                    everyMounthIndex={everyMounthIndex}\n                    oneTimeAmount={oneTimeAmount}\n                    oneTimeMonth={oneTimeMonth}\n                    oneTimeYear={oneTimeYear}\n                />\n            }\n        </div>\n    )\n}\n\nexport default AmortizationCalculator;","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js",["59","60","61","62","63","64","65"],"import React, { useState, useEffect } from 'react';\nimport styles from './AddExtraPayments.module.css';\nimport plus from '../photos/plus.png';\nimport minus from '../photos/minus.png';\nimport { getMonthIndex, monthsInYear, nameOfMonths, years, currentYear } from '../Mocks/mockData';\n\nconst AddExtraPayments = ({ setAddMonthlyPayment, setEveryMounthAmount, setEveryMounthName, setOneTimeAmount, setOneTimeMonth, setOneTimeYear, setEveryMounthIndex, setIsApplyed }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [clicked, setClicked] = useState(false);\n    const [addMonthlyPaymentX, setAddMonthlyPaymentX] = useState(0);\n    const [everyMounthAmountX, setEveryMounthAmountX] = useState(0);\n    const [everyMounthNameX, setEveryMounthNameX] = useState('January');\n    const [everyMounthIndexX, setEveryMounthIndexX] = useState(0);\n    const [oneTimeAmountX, setOneTimeAmountX] = useState(0);\n    const [oneTimeMonthX, setOneTimeMonthX] = useState(0);\n    const [oneTimeYearX, setOneTimeYearX] = useState(currentYear);\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    }\n\n    return (\n        <div className={styles.mainWrapper}>\n            <div className={styles.up}>\n                <div className={styles.leftContent}>\n                    {\n                        !isOpen ?\n                            <div className={styles.leftContentText}>\n                                Add Extra Payments\n                            </div>\n                            :\n                            <div className={styles.leftContentText}>\n                                Hide Extra Payments\n                            </div>\n                    }\n                </div>\n                <div className={styles.rightContent}>\n                    {!isOpen ? <a onClick={() => handleClick()}><img className={styles.plus} src={plus} alt='plus-logo' /></a> : null}\n                    {isOpen ? <a onClick={() => handleClick()}><img className={styles.minus} src={minus} alt='minus-logo' /></a> : null}\n                </div>\n            </div>\n            {isOpen &&\n                <div className={styles.down}>\n                    <div className={styles.downText}>\n                        <div className={styles.downTextContent}>\n                            Calculate the impact of extra payments using any combination of the\n                        </div>\n                        <div className={styles.downTextContent}>\n                            inputs below. To see your new estimated payoff date, click ‘Show\n                        </div>\n                        <div className={styles.downTextContent}>\n                            amortization schedule’ link above.\n                        </div>\n                    </div>\n                    <div className={styles.downInput}>\n                        <div className={styles.inputText}>\n                            Amount to your monthly payment\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setAddMonthlyPaymentX(e.target.value);\n                                }\n                                else {\n                                    setAddMonthlyPaymentX(0);\n                                }\n                            }} />\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as an extra yearly payment occurring every:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthAmountX(e.target.value);\n                                }\n                                else {\n                                    setEveryMounthAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthIndexX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    setEveryMounthIndexX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as a one-time payment in:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeAmountX(e.target.value)\n                                }\n                                else {\n                                    setOneTimeAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeMonthX(parseFloat(e.target.value))\n                                }\n                                else {\n                                    setOneTimeMonthX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                            <select style={{ width: '80px' }} onChange={(e) => {\n                                if (e.target.value || e.target.value !== 0) {\n                                    setOneTimeYearX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    console.log('nuuulaaaa');\n                                    setOneTimeYearX(parseFloat(currentYear));\n                                }\n\n                            }}>\n                                {\n                                    years.map((year, index) => {\n                                        return (\n                                            <option key={index} value={year}>{year}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n                    <div className={styles.downButton}>\n                        <button onClick={() => {\n                            setAddMonthlyPayment(addMonthlyPaymentX);\n                            setEveryMounthAmount(everyMounthAmountX);\n                            setEveryMounthName(nameOfMonths[everyMounthIndexX]);\n                            setOneTimeAmount(oneTimeAmountX);\n                            setOneTimeMonth(oneTimeMonthX);\n                            setOneTimeYear(oneTimeYearX);\n                            setEveryMounthIndex(everyMounthIndexX);\n                            setClicked(!clicked);\n                        }}>Apply Extra Payments</button>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default AddExtraPayments;","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js",["66","67","68","69","70","71","72"],"import React, { useState, useEffect } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { getMonthIndex, nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\n\nconst AmortizationSchedule = ({ loanYears, loanMonths, payment, interestRate, loanAmount, addMonthlyPayment, everyMounthAmount, everyMounthIndex, everyMounthName, oneTimeAmount, oneTimeMonth, oneTimeYear }) => {\n    const [currentDate, setCurrentDate] = useState();\n    const [futureDate, setFutureDate] = useState();\n    const nullVar = 0;\n    const currentMonthIndex = everyMounthIndex + 1;\n    var previousMonthIndex;\n    if (currentMonthIndex > 1) {\n        previousMonthIndex = currentMonthIndex - 1;\n    }\n    else {\n        previousMonthIndex = 12;\n    }\n\n    useEffect(() => {\n        if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n            getDate('years');\n        }\n        else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n            getDate('nan');\n        }\n        else {\n            getDate('months');\n            addTableRows(loanMonths);\n        }\n    }, [loanYears, loanMonths]);\n\n    const interestPerMounth = (interestRate, pmtt) => {\n        return (((interestRate / 100) / 12) * pmtt)\n    }\n\n    const currentMonth = () => {\n        var today = new Date();\n        return today.getMonth() + 1;\n    }\n\n    const currentYear = () => {\n        var today = new Date();\n        return today.getFullYear();\n    }\n\n    const addTableRows = (loanMonths) => {\n        var tableRows = [];\n        var interestArray = [];\n        var balanceArray = [];\n        var totalInterestArray = [];\n        var counter = currentMonth() + 1;\n        var counterYears = currentYear();\n        payment = (parseFloat(payment) + parseFloat(addMonthlyPayment));\n        var interest = interestPerMounth(interestRate, loanAmount);\n        var principal = (payment - interest);\n        var balance = (loanAmount - principal);\n        var totalInt = parseFloat(interest);\n        var sum = loanAmount;\n        var sumOne = loanAmount;\n        var coMounth = 0;\n        var startMonth;\n        var startYear;\n        if (everyMounthIndex === (counter - 1)) {\n            startMonth = true;\n        } else {\n            startMonth = false;\n        }\n        if (oneTimeMonth === (counter - 1) && oneTimeYear === counterYears) {\n            startYear = true;\n        } else {\n            startYear = false;\n        }\n        for (var i = 0; i < loanMonths; i++) {\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1 && startYear === false) {\n                payment = (parseFloat(payment) + parseFloat(oneTimeAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1 && startYear === true) {\n                payment = (parseFloat(payment) + parseFloat(oneTimeAmount));\n                interest = interestPerMounth(interestRate, sumOne);\n                principal = payment - interest;\n            }\n            if (counter === currentMonthIndex && startMonth === false) {\n                payment = (parseFloat(payment) + parseFloat(everyMounthAmount));\n            }\n            if (startMonth === true && counter === currentMonthIndex) {\n                payment = (parseFloat(payment) + parseFloat(everyMounthAmount));\n                interest = interestPerMounth(interestRate, sum);\n                principal = payment - interest;\n                if (coMounth === 0) {\n                    balance -= parseFloat(everyMounthAmount);\n                    coMounth++;\n                }\n            }\n            tableRows.push(\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 1]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${Number.isNaN(payment) === false ? parseFloat(payment).toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${Number.isNaN(principal) === false ? principal.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${Number.isNaN(interest) === false ? interest.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${Number.isNaN(totalInt) === false ? totalInt.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                </tr>\n            )\n            if (interest < 0) {\n                var lastPayment = balanceArray[balanceArray.length - 3] + parseFloat(interestArray[interestArray.length - 2]);\n                var lastPrincipal = balanceArray[balanceArray.length - 3];\n                var lastInterest = interestArray[interestArray.length - 2];\n                var lastTotalInterest = totalInterestArray[totalInterestArray.length - 3] + lastInterest;\n                // console.log('payment', lastPayment);\n                // console.log('----', parseFloat(interestArray[interestArray.length - 2]));\n                // console.log('---->', balanceArray[balanceArray.length - 3]);\n                // console.log('BBB', parseFloat(balanceArray[balanceArray.length - 3]) + parseFloat(interestArray[interestArray.length - 2]));\n                tableRows.pop();\n                tableRows[tableRows.length - 1] = <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 2]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${lastPayment && lastPayment.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${lastPrincipal && lastPrincipal.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${lastInterest && lastInterest.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${lastTotalInterest && lastTotalInterest.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                </tr>;\n                break;\n            }\n            if (counter === currentMonthIndex && startMonth === false) {\n                payment = (parseFloat(payment) - parseFloat(everyMounthAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1 && startYear === false) {\n                payment = (parseFloat(payment) - parseFloat(oneTimeAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1 && startYear === true) {\n                payment = (parseFloat(payment) - parseFloat(oneTimeAmount));\n                interest = interestPerMounth(interestRate, sumOne);\n                principal = payment - interest;\n                balance -= parseFloat(oneTimeAmount);\n                sumOne = balance;\n            }\n            interest = interestPerMounth(interestRate, balance);\n            totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n            if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n                payment = (parseFloat(payment) + parseFloat(oneTimeAmount));\n            }\n            if (counter === previousMonthIndex) {\n                payment = (parseFloat(payment) + parseFloat(everyMounthAmount));\n            }\n            principal = (payment - interest);\n            balance = (parseFloat(balance) - parseFloat(principal));\n            if (startMonth === true && counter === currentMonthIndex) {\n                payment = (parseFloat(payment) - parseFloat(everyMounthAmount));\n                interest = interestPerMounth(interestRate, sum);\n                principal = payment - interest;\n                balance += parseFloat(everyMounthAmount);\n                sum = balance;\n            }\n            if (counter === previousMonthIndex) {\n                payment = (parseFloat(payment) - parseFloat(everyMounthAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n                payment = (parseFloat(payment) - parseFloat(oneTimeAmount));\n            }\n            counter++;\n            interestArray.push(interest);\n            balanceArray.push(balance);\n            totalInterestArray.push(totalInt);\n\n            // if (interest < 0) {\n            //     break;\n            // }\n            if (counter > 12) {\n                counter = 1;\n                counterYears += 1;\n            }\n            if (i === loanMonths - 1) {\n                var lastPayment = balanceArray[balanceArray.length - 3] + parseFloat(interestArray[interestArray.length - 2]);\n                var lastPrincipal = balanceArray[balanceArray.length - 3];\n                var lastInterest = interestArray[interestArray.length - 2];\n                var lastTotalInterest = totalInterestArray[totalInterestArray.length - 3] + lastInterest;\n                tableRows[tableRows.length - 1] = <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 2]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${lastPayment && lastPayment.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${lastPrincipal && lastPrincipal.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${lastInterest && lastInterest.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${lastTotalInterest && lastTotalInterest.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                </tr>;\n            }\n        }\n        return tableRows;\n    }\n\n    const rowsRender = () => {\n        return (\n            addTableRows(loanMonths)\n        )\n    }\n\n    const getDate = (yearsOrMonths) => {\n        var today = new Date();\n        let current = (today.getMonth() + 1) + '/' + (today.getDate()) + '/' + (today.getFullYear());\n        setCurrentDate(current);\n        if (yearsOrMonths === 'years') {\n            var future = new Date();\n            future.setFullYear(future.getFullYear() + loanYears);\n            setFutureDate((nameOfMonths[future.getMonth() + 1]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n        else if (yearsOrMonths === 'nan') {\n            // var today = new Date();\n            let fut = (nameOfMonths[today.getMonth()]) + ' ' + (today.getDate()) + ', ' + (today.getFullYear());\n            setFutureDate(fut);\n        }\n        else {\n            var future = new Date();\n            future.setMonth(future.getMonth() + loanMonths);\n            setFutureDate((nameOfMonths[future.getMonth()]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n    }\n\n    return (\n        <div className={styles.MainWrapper}>\n            <div className={styles.CentralWrapper}>\n                <div className={styles.Date}>\n                    <div className={styles.StartDateDiv}>\n                        <div className={styles.StartDateDivText}>\n                            Start Date\n                        </div>\n                        <div className={styles.StartDateDivInput}>\n                            <input type=\"text\" value={currentDate} disabled={true}></input>\n                        </div>\n                    </div>\n                    <div className={styles.EstimatedDate}>\n                        <div className={styles.EstimatedDateText}>\n                            Estimated Payoff Date\n                        </div>\n                        <div className={styles.EstimatedDateEnd}>\n                            {futureDate ? futureDate : currentDate}\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.Title}>\n                    Amortization Schedule\n                </div>\n                <div className={styles.Table}>\n                    <thead>\n                        <tr>\n                            <th className={styles.HeadOne}>Payment Date</th>\n                            <th className={styles.HeadTwo}>Payment</th>\n                            <th className={styles.HeadThree}>Principal</th>\n                            <th className={styles.HeadFour}>Interest</th>\n                            <th className={styles.HeadFive}>Total Interest</th>\n                            <th className={styles.HeadSix}>Balance</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowsRender()}\n                    </tbody>\n                </div>\n                <div className={styles.Print}>\n                    <div className={styles.PrintText}>\n                        Print Schedule\n                    </div>\n                    <div className={styles.PrintImage}>\n                        <img alt=\"Print\" src={logo} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmortizationSchedule;","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js",[],{"ruleId":"73","severity":1,"message":"74","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"73","severity":1,"message":"81","line":6,"column":10,"nodeType":"75","messageId":"76","endLine":6,"endColumn":30},{"ruleId":"73","severity":1,"message":"82","line":24,"column":12,"nodeType":"75","messageId":"76","endLine":24,"endColumn":21},{"ruleId":"73","severity":1,"message":"83","line":51,"column":11,"nodeType":"75","messageId":"76","endLine":51,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":104,"column":29,"nodeType":"86","endLine":104,"endColumn":67},{"ruleId":"84","severity":1,"message":"85","line":106,"column":29,"nodeType":"86","endLine":106,"endColumn":67},{"ruleId":"73","severity":1,"message":"74","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"87","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":23},{"ruleId":"73","severity":1,"message":"88","line":5,"column":25,"nodeType":"75","messageId":"76","endLine":5,"endColumn":37},{"ruleId":"73","severity":1,"message":"89","line":12,"column":12,"nodeType":"75","messageId":"76","endLine":12,"endColumn":28},{"ruleId":"73","severity":1,"message":"90","line":12,"column":30,"nodeType":"75","messageId":"76","endLine":12,"endColumn":49},{"ruleId":"84","severity":1,"message":"85","line":37,"column":32,"nodeType":"86","endLine":37,"endColumn":65},{"ruleId":"84","severity":1,"message":"85","line":38,"column":31,"nodeType":"86","endLine":38,"endColumn":64},{"ruleId":"73","severity":1,"message":"87","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":23},{"ruleId":"91","severity":1,"message":"92","line":30,"column":8,"nodeType":"93","endLine":30,"endColumn":31,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":173,"column":21,"nodeType":"75","messageId":"97","endLine":173,"endColumn":32},{"ruleId":"95","severity":1,"message":"98","line":174,"column":21,"nodeType":"75","messageId":"97","endLine":174,"endColumn":34},{"ruleId":"95","severity":1,"message":"99","line":175,"column":21,"nodeType":"75","messageId":"97","endLine":175,"endColumn":33},{"ruleId":"95","severity":1,"message":"100","line":176,"column":21,"nodeType":"75","messageId":"97","endLine":176,"endColumn":38},{"ruleId":"95","severity":1,"message":"101","line":211,"column":17,"nodeType":"75","messageId":"97","endLine":211,"endColumn":23},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["102"],"no-negated-in-lhs",["103"],"'getNumberOfTableRows' is defined but never used.","'isApplyed' is assigned a value but never used.","'getDate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getMonthIndex' is defined but never used.","'monthsInYear' is defined but never used.","'everyMounthNameX' is assigned a value but never used.","'setEveryMounthNameX' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addTableRows' and 'getDate'. Either include them or remove the dependency array.","ArrayExpression",["104"],"no-redeclare","'lastPayment' is already defined.","redeclared","'lastPrincipal' is already defined.","'lastInterest' is already defined.","'lastTotalInterest' is already defined.","'future' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},"Update the dependencies array to be: [loanYears, loanMonths, getDate, addTableRows]",{"range":"107","text":"108"},[1228,1251],"[loanYears, loanMonths, getDate, addTableRows]"]