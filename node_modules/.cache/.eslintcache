[{"/Users/ankora/Desktop/calculator/calculator/src/index.js":"1","/Users/ankora/Desktop/calculator/calculator/src/App.js":"2","/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"3","/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"4","/Users/ankora/Desktop/calc/calculator/src/index.js":"5","/Users/ankora/Desktop/calc/calculator/src/App.js":"6","/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js":"7","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js":"8","/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js":"9","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js":"10","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js":"11"},{"size":230,"mtime":1628768444524,"results":"12","hashOfConfig":"13"},{"size":372,"mtime":1628675244409,"results":"14","hashOfConfig":"13"},{"size":4366,"mtime":1628684196613,"results":"15","hashOfConfig":"13"},{"size":1611,"mtime":1628684444292,"results":"16","hashOfConfig":"13"},{"size":291,"mtime":1632750263628,"results":"17","hashOfConfig":"18"},{"size":675,"mtime":1632838590873,"results":"19","hashOfConfig":"18"},{"size":2269,"mtime":1633941946183,"results":"20","hashOfConfig":"18"},{"size":8208,"mtime":1633941776923,"results":"21","hashOfConfig":"18"},{"size":8117,"mtime":1632997572097,"results":"22","hashOfConfig":"18"},{"size":16318,"mtime":1633013669561,"results":"23","hashOfConfig":"18"},{"size":1226,"mtime":1631693987626,"results":"24","hashOfConfig":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"decpmd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"1j7m0ep",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/ankora/Desktop/calculator/calculator/src/index.js",[],"/Users/ankora/Desktop/calculator/calculator/src/App.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",[],"/Users/ankora/Desktop/calculator/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["51"],"/Users/ankora/Desktop/calc/calculator/src/index.js",["52"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst target = document.querySelector(\"#react-calculator\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react-calculator')\n);",["53","54"],"/Users/ankora/Desktop/calc/calculator/src/App.js",[],"/Users/ankora/Desktop/calc/calculator/src/components/MortgageCalculator/MortgageCalculator.js",["55"],"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationCalculator/AmortizationCalculator.js",["56","57","58","59","60"],"/Users/ankora/Desktop/calc/calculator/src/components/AddExtraPayments/AddExtraPayments.js",["61","62","63","64","65","66","67"],"import React, { useState, useEffect } from 'react';\nimport styles from './AddExtraPayments.module.css';\nimport plus from '../photos/plus.png';\nimport minus from '../photos/minus.png';\nimport { getMonthIndex, monthsInYear, nameOfMonths, years, currentYear } from '../Mocks/mockData';\n\nconst AddExtraPayments = ({ setAddMonthlyPayment, setEveryMounthAmount, setEveryMounthName, setOneTimeAmount, setOneTimeMonth, setOneTimeYear, setEveryMounthIndex, setIsApplyed }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [clicked, setClicked] = useState(false);\n    const [addMonthlyPaymentX, setAddMonthlyPaymentX] = useState(0);\n    const [everyMounthAmountX, setEveryMounthAmountX] = useState(0);\n    const [everyMounthNameX, setEveryMounthNameX] = useState('January');\n    const [everyMounthIndexX, setEveryMounthIndexX] = useState(0);\n    const [oneTimeAmountX, setOneTimeAmountX] = useState(0);\n    const [oneTimeMonthX, setOneTimeMonthX] = useState(0);\n    const [oneTimeYearX, setOneTimeYearX] = useState(currentYear);\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    }\n\n    return (\n        <div className={styles.mainWrapper}>\n            <div className={styles.up}>\n                <div className={styles.leftContent}>\n                    {\n                        !isOpen ?\n                            <div className={styles.leftContentText}>\n                                Add Extra Payments\n                            </div>\n                            :\n                            <div className={styles.leftContentText}>\n                                Hide Extra Payments\n                            </div>\n                    }\n                </div>\n                <div className={styles.rightContent}>\n                    {!isOpen ? <a onClick={() => handleClick()}><img className={styles.plus} src={plus} alt='plus-logo' /></a> : null}\n                    {isOpen ? <a onClick={() => handleClick()}><img className={styles.minus} src={minus} alt='minus-logo' /></a> : null}\n                </div>\n            </div>\n            {isOpen &&\n                <div className={styles.down}>\n                    <div className={styles.downText}>\n                        <div className={styles.downTextContent}>\n                            Calculate the impact of extra payments using any combination of the\n                        </div>\n                        <div className={styles.downTextContent}>\n                            inputs below. To see your new estimated payoff date, click ‘Show\n                        </div>\n                        <div className={styles.downTextContent}>\n                            amortization schedule’ link above.\n                        </div>\n                    </div>\n                    <div className={styles.downInput}>\n                        <div className={styles.inputText}>\n                            Amount to your monthly payment\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setAddMonthlyPaymentX(e.target.value);\n                                }\n                                else {\n                                    setAddMonthlyPaymentX(0);\n                                }\n                            }} />\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as an extra yearly payment occurring every:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthAmountX(e.target.value);\n                                }\n                                else {\n                                    setEveryMounthAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setEveryMounthIndexX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    setEveryMounthIndexX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index + 1}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className={styles.inputText}>\n                            Amount as a one-time payment in:\n                        </div>\n                        <div className={styles.inputs}>\n                            <input type='number' placeholder='$' onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeAmountX(e.target.value)\n                                }\n                                else {\n                                    setOneTimeAmountX(0)\n                                }\n                            }} />\n                            <select onChange={(e) => {\n                                if (e.target.value) {\n                                    setOneTimeMonthX(parseFloat(e.target.value))\n                                }\n                                else {\n                                    setOneTimeMonthX(0);\n                                }\n                            }}>\n                                {\n                                    nameOfMonths.map((month, index) => {\n                                        return (\n                                            <option key={index} value={index + 1}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                            <select style={{ width: '80px' }} onChange={(e) => {\n                                if (e.target.value || e.target.value !== 0) {\n                                    setOneTimeYearX(parseFloat(e.target.value));\n                                }\n                                else {\n                                    console.log('nuuulaaaa');\n                                    setOneTimeYearX(parseFloat(currentYear));\n                                }\n\n                            }}>\n                                {\n                                    years.map((year, index) => {\n                                        return (\n                                            <option key={index} value={year}>{year}</option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n                    <div className={styles.downButton}>\n                        <button onClick={() => {\n                            setAddMonthlyPayment(addMonthlyPaymentX);\n                            setEveryMounthAmount(everyMounthAmountX);\n                            setEveryMounthName(nameOfMonths[everyMounthIndexX]);\n                            setOneTimeAmount(oneTimeAmountX);\n                            setOneTimeMonth(oneTimeMonthX);\n                            setOneTimeYear(oneTimeYearX);\n                            setEveryMounthIndex(everyMounthIndexX);\n                            setClicked(!clicked);\n                        }}>Apply Extra Payments</button>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default AddExtraPayments;","/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js",["68","69","70","71","72","73","74","75"],"import React, { useState, useEffect, useRef } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\nimport ReactToPrint from 'react-to-print';\n\nconst AmortizationSchedule = ({ loanYears, loanMonths, payment, interestRate, loanAmount, addMonthlyPayment, everyMounthAmount, everyMounthIndex, everyMounthName, oneTimeAmount, oneTimeMonth, oneTimeYear }) => {\n    const [currentDate, setCurrentDate] = useState();\n    const [futureDate, setFutureDate] = useState();\n    const printRef = useRef();\n    const nullVar = 0;\n    const currentMonthIndex = everyMounthIndex + 1;\n    var previousMonthIndex;\n    var datesArray = [];\n    var yearsArray = [];\n    if (currentMonthIndex > 1) {\n        previousMonthIndex = currentMonthIndex - 1;\n    }\n    else {\n        previousMonthIndex = 12;\n    }\n\n    useEffect(() => {\n        if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n            getDate('years');\n        }\n        else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n            getDate('nan');\n        }\n        else {\n            getDate('months');\n            addTableRows(loanMonths);\n        }\n    }, [loanYears, loanMonths]);\n\n    useEffect(() => {\n        var date = new Date();\n        if (nameOfMonths[datesArray[datesArray.length - 2]] !== undefined) {\n            var temp = nameOfMonths[datesArray[datesArray.length - 2]] + ' ' + date.getDate() + ', ' + yearsArray[yearsArray.length - 1];\n            setFutureDate(temp);\n        }\n        else {\n            var tempp = nameOfMonths[(date.getMonth() + 2) + ' ' + date.getDate() + ', ' + yearsArray[yearsArray.length - 1]];\n            setFutureDate(tempp);\n        }\n    });\n\n    const interestPerMounth = (interestRate, pmtt) => {\n        return (((interestRate / 100) / 12) * pmtt)\n    }\n\n    const currentMonth = () => {\n        var today = new Date();\n        return today.getMonth() + 1;\n    }\n\n    const currentYear = () => {\n        var today = new Date();\n        return today.getFullYear();\n    }\n\n    const addTableRows = (loanMonths) => {\n        var date = new Date();\n        var tableRows = [];\n        var paymentArray = [];\n        var principalArray = [];\n        var interestArray = [];\n        var balanceArray = [];\n        var totalInterestArray = [];\n        var nullVar = 0;\n        var paymentt = payment;\n        if (addMonthlyPayment > 0) {\n            paymentt += parseFloat(addMonthlyPayment);\n        }\n        var interest = interestPerMounth(interestRate, loanAmount);\n        var principal = paymentt - interest;\n        var balance = loanAmount - principal;\n        var totalInterest = interest;\n        var currentMonth = date.getMonth() + 1;\n        var currentYear = date.getFullYear();\n        var counterMonths = currentMonth + 1;\n        paymentArray.push(paymentt);\n        principalArray.push(principal);\n        interestArray.push(interest);\n        balanceArray.push(balance);\n\n        console.log(oneTimeMonth, everyMounthIndex);\n        console.log('start')\n        for (var i = 0; i < loanMonths; i++) {\n            console.log(counterMonths)\n            datesArray.push(counterMonths);\n            yearsArray.push(currentYear);\n            if ((oneTimeMonth === counterMonths && oneTimeYear === currentYear)) {\n                // if (i === 0) {\n                //     paymentt = paymentt + parseFloat(oneTimeAmount);\n                //     interest = interestPerMounth(interestRate, loanAmount);\n                //     principal = parseFloat(paymentt) - parseFloat(interest);\n                //     balance = loanAmount - principal;\n                // }\n                // else {\n                paymentt = paymentt + parseFloat(oneTimeAmount);\n                principal = parseFloat(paymentt) - parseFloat(interest);\n                balance = balance - (parseFloat(oneTimeAmount));\n                // }\n            }\n            if ((everyMounthIndex === counterMonths)) {\n                if (i === 0) {\n                    paymentt = paymentt + parseFloat(everyMounthAmount);\n                    interest = interestPerMounth(interestRate, loanAmount);\n                    principal = parseFloat(paymentt) - parseFloat(interest);\n                    balance = loanAmount - principal;\n                }\n                else {\n                    paymentt = paymentt + parseFloat(everyMounthAmount);\n                    principal = parseFloat(paymentt) - parseFloat(interest);\n                    balance = balance - (parseFloat(everyMounthAmount));\n                }\n            }\n            tableRows.push(\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counterMonths - 1]} {currentYear}</th>\n                    <th className={styles.BodyTwo}>${paymentt.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    <th className={styles.BodyThree}>${principal.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    <th className={styles.BodyFour}>${interest.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    <th className={styles.BodyFive}>${totalInterest.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    <th className={styles.BodySix}>${balance.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                </tr>\n            )\n            if ((oneTimeMonth === counterMonths && oneTimeYear === currentYear)) {\n                // if (i === 0) {\n                //     paymentt = paymentt - parseFloat(oneTimeAmount);\n                // }\n                // else {\n                paymentt = paymentt - parseFloat(oneTimeAmount);\n                // }\n            }\n            if ((everyMounthIndex === counterMonths)) {\n                if (i === 0) {\n                    paymentt = paymentt - parseFloat(everyMounthAmount);\n                }\n                else {\n                    paymentt = paymentt - parseFloat(everyMounthAmount);\n                }\n            }\n            // Smanjuje vrijednosti svega\n            interest = interestPerMounth(interestRate, balance);\n            totalInterest += interest;\n            principal = paymentt - interest;\n            balance = balance - principal;\n            interestArray.push(interest);\n            principalArray.push(principal);\n            balanceArray.push(balance);\n            totalInterestArray.push(totalInterest);\n            // Pomjera mjesece i godine u tablei\n            counterMonths++;\n            if (interest < 0) {\n                break;\n            }\n            if (counterMonths > 12) {\n                counterMonths = 1;\n                currentYear++;\n            }\n        }\n        // Korekcija zadnjeg reda\n        if (tableRows.length > 1) {\n            var lastPayment = balanceArray[balanceArray.length - 3] + interestArray[interestArray.length - 2];\n            var lastTotalInterest = interestArray[interestArray.length - 2] + totalInterestArray[totalInterestArray.length - 3];\n            tableRows[tableRows.length - 1] =\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counterMonths - 2]} {currentYear}</th>\n                    <th className={styles.BodyTwo}>${!undefined ? lastPayment.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyThree}>${!undefined ? balanceArray[balanceArray.length - 3].toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyFour}>${!undefined ? interestArray[interestArray.length - 2].toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyFive}>${!undefined ? lastTotalInterest.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodySix}>${nullVar.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                </tr>;\n        }\n        if (tableRows.length === 1) {\n            tableRows[0] =\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counterMonths - 2]} {currentYear}</th>\n                    <th className={styles.BodyTwo}>${!undefined ? (loanAmount + interestPerMounth(interestRate, loanAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyThree}>${!undefined ? (loanAmount).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyFour}>${!undefined ? interestArray[interestArray.length - 2].toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodyFive}>${!undefined ? (interestPerMounth(interestRate, loanAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                    <th className={styles.BodySix}>${nullVar.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                </tr>;\n        }\n        if (tableRows.length === 2) {\n            if (oneTimeAmount === 0) {\n                tableRows[1] =\n                    <tr className={styles.TableRow}>\n                        <th className={styles.BodyOne}>{nameOfMonthsShortcut[counterMonths - 2]} {currentYear}</th>\n                        <th className={styles.BodyTwo}>${!undefined ? (balanceArray[0] - parseFloat(everyMounthAmount) + interestArray[interestArray.length - 2]).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyThree}>${!undefined ? (balanceArray[0] - parseFloat(everyMounthAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyFour}>${!undefined ? interestArray[interestArray.length - 2].toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyFive}>${!undefined ? (interestArray[interestArray.length - 2] + interestPerMounth(interestRate, loanAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodySix}>${nullVar.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    </tr>;\n            } else {\n                tableRows[1] =\n                    <tr className={styles.TableRow}>\n                        <th className={styles.BodyOne}>{nameOfMonthsShortcut[counterMonths - 2]} {currentYear}</th>\n                        <th className={styles.BodyTwo}>${!undefined ? (balanceArray[0] - parseFloat(everyMounthAmount) - parseFloat(oneTimeAmount) + interestArray[interestArray.length - 2]).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyThree}>${!undefined ? (balanceArray[0] - parseFloat(everyMounthAmount) - parseFloat(oneTimeAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyFour}>${!undefined ? interestArray[interestArray.length - 2].toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodyFive}>${!undefined ? (interestArray[interestArray.length - 2] + interestPerMounth(interestRate, loanAmount)).toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 }) : null}</th>\n                        <th className={styles.BodySix}>${nullVar.toLocaleString(undefined, { maximumFractionDigits: 2, minimumFractionDigits: 2 })}</th>\n                    </tr>;\n            }\n        }\n        return tableRows;\n    }\n\n    const rowsRender = () => {\n        return (\n            addTableRows(loanMonths)\n        )\n    }\n\n    const getDate = (yearsOrMonths) => {\n        var today = new Date();\n        let current = (today.getMonth() + 1) + '/' + (today.getDate()) + '/' + (today.getFullYear());\n        setCurrentDate(current);\n        if (yearsOrMonths === 'years') {\n            var future = new Date();\n            future.setFullYear(future.getFullYear() + loanYears);\n            setFutureDate((nameOfMonths[future.getMonth() + 1]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n        else if (yearsOrMonths === 'nan') {\n            let fut = (nameOfMonths[today.getMonth()]) + ' ' + (today.getDate()) + ', ' + (today.getFullYear());\n            setFutureDate(fut);\n        }\n        else {\n            var future = new Date();\n            future.setMonth(future.getMonth() + loanMonths);\n            setFutureDate((nameOfMonths[future.getMonth()]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n    }\n\n    return (\n        <div className={styles.MainWrapper}>\n            <div className={styles.CentralWrapper}>\n                <div className={styles.Date}>\n                    <div className={styles.StartDateDiv}>\n                        <div className={styles.StartDateDivText}>\n                            Start Date\n                        </div>\n                        <div className={styles.StartDateDivInput}>\n                            <input type=\"text\" value={currentDate} disabled={true}></input>\n                        </div>\n                    </div>\n                    <div className={styles.EstimatedDate}>\n                        <div className={styles.EstimatedDateText}>\n                            Estimated Payoff Date\n                        </div>\n                        <div className={styles.EstimatedDateEnd}>\n                            {futureDate ? futureDate : currentDate}\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.Title}>\n                    Amortization Schedule\n                </div>\n                <div className={styles.Table} ref={printRef}>\n                    <thead>\n                        <tr>\n                            <th className={styles.HeadOne}>Payment Date</th>\n                            <th className={styles.HeadTwo}>Payment</th>\n                            <th className={styles.HeadThree}>Principal</th>\n                            <th className={styles.HeadFour}>Interest</th>\n                            <th className={styles.HeadFive}>Total Interest</th>\n                            <th className={styles.HeadSix}>Balance</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowsRender()}\n                    </tbody>\n                </div>\n                <div className={styles.Print}>\n                    <div className={styles.PrintText}>\n                        <ReactToPrint\n                            trigger={() => {\n                                return <input type=\"button\" value={'Print Schedule'} />\n                            }}\n                            content={() => printRef.current}\n                        />\n                    </div>\n                    <div className={styles.PrintImage}>\n                        <ReactToPrint\n                            trigger={() => {\n                                return <input type=\"image\" src={logo} />\n                            }}\n                            content={() => printRef.current}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmortizationSchedule;","/Users/ankora/Desktop/calc/calculator/src/components/Mocks/mockData.js",[],{"ruleId":"76","severity":1,"message":"77","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"80","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":13},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"85","line":23,"column":12,"nodeType":"78","messageId":"79","endLine":23,"endColumn":21},{"ruleId":"76","severity":1,"message":"86","line":50,"column":11,"nodeType":"78","messageId":"79","endLine":50,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":52,"column":13,"nodeType":"78","messageId":"79","endLine":52,"endColumn":17},{"ruleId":"88","severity":1,"message":"89","line":103,"column":29,"nodeType":"90","endLine":103,"endColumn":67},{"ruleId":"88","severity":1,"message":"89","line":105,"column":29,"nodeType":"90","endLine":105,"endColumn":67},{"ruleId":"76","severity":1,"message":"77","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"91","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":23},{"ruleId":"76","severity":1,"message":"92","line":5,"column":25,"nodeType":"78","messageId":"79","endLine":5,"endColumn":37},{"ruleId":"76","severity":1,"message":"93","line":12,"column":12,"nodeType":"78","messageId":"79","endLine":12,"endColumn":28},{"ruleId":"76","severity":1,"message":"94","line":12,"column":30,"nodeType":"78","messageId":"79","endLine":12,"endColumn":49},{"ruleId":"88","severity":1,"message":"89","line":37,"column":32,"nodeType":"90","endLine":37,"endColumn":65},{"ruleId":"88","severity":1,"message":"89","line":38,"column":31,"nodeType":"90","endLine":38,"endColumn":64},{"ruleId":"76","severity":1,"message":"95","line":11,"column":11,"nodeType":"78","messageId":"79","endLine":11,"endColumn":18},{"ruleId":"76","severity":1,"message":"96","line":20,"column":9,"nodeType":"78","messageId":"79","endLine":20,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":34,"column":8,"nodeType":"99","endLine":34,"endColumn":31,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":36,"column":5,"nodeType":"78","endLine":36,"endColumn":14,"suggestions":"102"},{"ruleId":"76","severity":1,"message":"103","line":52,"column":11,"nodeType":"78","messageId":"79","endLine":52,"endColumn":23},{"ruleId":"76","severity":1,"message":"104","line":57,"column":11,"nodeType":"78","messageId":"79","endLine":57,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":235,"column":17,"nodeType":"78","messageId":"107","endLine":235,"endColumn":23},{"ruleId":"108","severity":1,"message":"109","line":292,"column":40,"nodeType":"90","endLine":292,"endColumn":73},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'target' is assigned a value but never used.","no-native-reassign",["110"],"no-negated-in-lhs",["111"],"'isApplyed' is assigned a value but never used.","'getDate' is assigned a value but never used.","'date' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getMonthIndex' is defined but never used.","'monthsInYear' is defined but never used.","'everyMounthNameX' is assigned a value but never used.","'setEveryMounthNameX' is assigned a value but never used.","'nullVar' is assigned a value but never used.","'previousMonthIndex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addTableRows' and 'getDate'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect contains a call to 'setFutureDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [datesArray, yearsArray] as a second argument to the useEffect Hook.",["113"],"'currentMonth' is assigned a value but never used.","'currentYear' is assigned a value but never used.","no-redeclare","'future' is already defined.","redeclared","jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [loanYears, loanMonths, getDate, addTableRows]",{"range":"118","text":"119"},"Add dependencies array: [datesArray, yearsArray]",{"range":"120","text":"121"},[1345,1368],"[loanYears, loanMonths, getDate, addTableRows]",[1874,1874],", [datesArray, yearsArray]"]