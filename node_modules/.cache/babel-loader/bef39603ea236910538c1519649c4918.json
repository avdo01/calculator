{"ast":null,"code":"var _jsxFileName = \"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AmortizationSchedule = ({\n  loanYears,\n  loanMonths,\n  payment,\n  interestRate,\n  loanAmount,\n  addMonthlyPayment,\n  everyMounthAmount,\n  everyMounthName,\n  oneTimeAmount,\n  oneTimeMonth,\n  oneTimeYear\n}) => {\n  _s();\n\n  const [currentDate, setCurrentDate] = useState();\n  const [futureDate, setFutureDate] = useState(); // const [totalInterestVar, setTotalInterestVar] = useState(0);\n  // const [numberOfMonths, setNumberOfMonths] = useState(0);\n\n  var totalInterestVar = 0;\n  const nullVar = 0; // var numberRows;\n\n  const [numberRows, setNumberRows] = useState(0); // console.log('addMonthlyPayment', addMonthlyPayment);\n\n  useEffect(() => {\n    if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n      getDate('years');\n    } else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n      getDate('nan');\n    } else {\n      getDate('months');\n      addTableRows(loanMonths);\n    }\n\n    if (totalInterestVar !== 0) {// console.log('TOTAL INTEREST VAR', totalInterestVar);\n    }\n  }, [loanYears, loanMonths, totalInterestVar]);\n  useEffect(() => {\n    const lastNumber = (paymentt, pti) => {\n      // console.log('-----POCETAK--');\n      var counter = 1;\n\n      for (var i = 0; i < loanMonths; i++) {\n        // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n        // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n        if ((pti - (i + 1) * paymentt).toFixed(2) > 0) {\n          // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n          counter++;\n        }\n      }\n\n      console.log('COUNTER', counter);\n      setNumberRows(counter); // console.log('-----KRAJ--');\n      // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n    }; // Ovdje trenutno unosim podatke\n\n\n    lastNumber(1096.6640076471413, 5000 + 71.15);\n  }, []);\n\n  const interestPerMounth = (interestRate, pmtt) => {\n    return interestRate / 100 / 12 * pmtt;\n  };\n\n  const currentMonth = () => {\n    var today = new Date();\n    return today.getMonth() + 1;\n  };\n\n  const currentYear = () => {\n    var today = new Date();\n    return today.getFullYear();\n  }; // const LastRowIndex = (loanMonths) => {\n  //     var lastRow;\n  //     payment = (parseFloat(payment) + parseFloat(addMonthlyPayment));\n  //     console.log('&&&&&&&&', payment);\n  //     payment = parseFloat(payment) + parseFloat(totalInterestVar);\n  //     var interest = interestPerMounth(interestRate, loanAmount);\n  //     var principal = (payment - interest);\n  //     var balance = (loanAmount - principal);\n  //     var totalInt = parseFloat(interest);\n  //     for (var i = 0; i < loanMonths; i++) {\n  //         interest = interestPerMounth(interestRate, balance);\n  //         totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n  //         principal = (payment - interest);\n  //         balance = (balance - principal);\n  //         if (interest < 0) {\n  //             break;\n  //         }\n  //         if (interest >= 0) {\n  //             lastRow++;\n  //         }\n  //     }\n  //     return lastRow;\n  // }\n  // var LastRow = 0;\n\n\n  const addTableRows = loanMonths => {\n    var tableRows = [];\n    var counter = currentMonth() + 1;\n    var counterYears = currentYear();\n    payment = parseFloat(payment) + parseFloat(addMonthlyPayment);\n    console.log('&&&&&&&&', payment);\n    payment = parseFloat(payment) + parseFloat(totalInterestVar);\n    var interest = interestPerMounth(interestRate, loanAmount);\n    var principal = payment - interest;\n    var balance = loanAmount - principal;\n    var totalInt = parseFloat(interest);\n\n    for (var i = 0; i < loanMonths; i++) {\n      tableRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: styles.TableRow,\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyOne,\n          children: [nameOfMonthsShortcut[counter - 1], \" \", counterYears]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyTwo,\n          children: [\"$\", Number.isNaN(payment) === false ? parseFloat(payment).toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyThree,\n          children: [\"$\", Number.isNaN(principal) === false ? principal.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyFour,\n          children: [\"$\", Number.isNaN(interest) === false ? interest.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyFive,\n          children: [\"$\", Number.isNaN(totalInt) === false ? totalInt.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodySix,\n          children: [\"$\", balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this));\n      interest = interestPerMounth(interestRate, balance);\n      totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n      principal = payment - interest;\n      balance = balance - principal;\n      counter++;\n\n      if (interest < 0) {\n        break;\n      }\n\n      if (counter > 12) {\n        counter = 1;\n        counterYears += 1;\n      }\n\n      if (i === loanMonths - 1) {\n        totalInterestVar = +totalInt;\n      }\n    }\n\n    return tableRows;\n  };\n\n  const rowsRender = () => {\n    return addTableRows(loanMonths);\n  };\n\n  const getDate = yearsOrMonths => {\n    var today = new Date();\n    let current = today.getMonth() + 1 + '/' + today.getDate() + '/' + today.getFullYear();\n    setCurrentDate(current);\n\n    if (yearsOrMonths === 'years') {\n      var future = new Date();\n      future.setFullYear(future.getFullYear() + loanYears);\n      setFutureDate(nameOfMonths[future.getMonth() + 1] + ' ' + future.getDate() + ', ' + future.getFullYear());\n    } else if (yearsOrMonths === 'nan') {\n      // var today = new Date();\n      let fut = nameOfMonths[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear();\n      setFutureDate(fut);\n    } else {\n      var future = new Date();\n      future.setMonth(future.getMonth() + loanMonths);\n      setFutureDate(nameOfMonths[future.getMonth()] + ' ' + future.getDate() + ', ' + future.getFullYear());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.MainWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CentralWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Date,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.StartDateDiv,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.StartDateDivText,\n            children: \"Start Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.StartDateDivInput,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: currentDate,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.EstimatedDate,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.EstimatedDateText,\n            children: \"Estimated Payoff Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.EstimatedDateEnd,\n            children: futureDate ? futureDate : currentDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Title,\n        children: \"Amortization Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadOne,\n              children: \"Payment Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadTwo,\n              children: \"Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadThree,\n              children: \"Principal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadFour,\n              children: \"Interest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadFive,\n              children: \"Total Interest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadSix,\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rowsRender()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Print,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.PrintText,\n          children: \"Print Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.PrintImage,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Print\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AmortizationSchedule, \"92QST/mK4WexfZvGoDQecWCD5Us=\");\n\n_c = AmortizationSchedule;\nexport default AmortizationSchedule;\n\nvar _c;\n\n$RefreshReg$(_c, \"AmortizationSchedule\");","map":{"version":3,"sources":["/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js"],"names":["React","useState","useEffect","styles","logo","nameOfMonths","nameOfMonthsShortcut","AmortizationSchedule","loanYears","loanMonths","payment","interestRate","loanAmount","addMonthlyPayment","everyMounthAmount","everyMounthName","oneTimeAmount","oneTimeMonth","oneTimeYear","currentDate","setCurrentDate","futureDate","setFutureDate","totalInterestVar","nullVar","numberRows","setNumberRows","Number","isInteger","getDate","isNaN","addTableRows","lastNumber","paymentt","pti","counter","i","toFixed","console","log","interestPerMounth","pmtt","currentMonth","today","Date","getMonth","currentYear","getFullYear","tableRows","counterYears","parseFloat","interest","principal","balance","totalInt","push","TableRow","BodyOne","BodyTwo","BodyThree","BodyFour","BodyFive","BodySix","rowsRender","yearsOrMonths","current","future","setFullYear","fut","setMonth","MainWrapper","CentralWrapper","StartDateDiv","StartDateDivText","StartDateDivInput","EstimatedDate","EstimatedDateText","EstimatedDateEnd","Title","Table","HeadOne","HeadTwo","HeadThree","HeadFour","HeadFive","HeadSix","Print","PrintText","PrintImage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\n\nconst AmortizationSchedule = ({ loanYears, loanMonths, payment, interestRate, loanAmount, addMonthlyPayment, everyMounthAmount, everyMounthName, oneTimeAmount, oneTimeMonth, oneTimeYear }) => {\n    const [currentDate, setCurrentDate] = useState();\n    const [futureDate, setFutureDate] = useState();\n    // const [totalInterestVar, setTotalInterestVar] = useState(0);\n    // const [numberOfMonths, setNumberOfMonths] = useState(0);\n    var totalInterestVar = 0;\n    const nullVar = 0;\n    // var numberRows;\n    const [numberRows, setNumberRows] = useState(0);\n    // console.log('addMonthlyPayment', addMonthlyPayment);\n\n    useEffect(() => {\n        if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n            getDate('years');\n        }\n        else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n            getDate('nan');\n        }\n        else {\n            getDate('months');\n            addTableRows(loanMonths);\n        }\n        if (totalInterestVar !== 0) {\n            // console.log('TOTAL INTEREST VAR', totalInterestVar);\n        }\n    }, [loanYears, loanMonths, totalInterestVar]);\n\n    useEffect(() => {\n        const lastNumber = (paymentt, pti) => {\n            // console.log('-----POCETAK--');\n            var counter = 1;\n            for (var i = 0; i < loanMonths; i++) {\n                // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n                // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n                if ((pti - ((i + 1) * paymentt)).toFixed(2) > 0) {\n                    // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n                    counter++;\n                }\n            }\n            console.log('COUNTER', counter)\n            setNumberRows(counter);\n            // console.log('-----KRAJ--');\n            // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n        }\n        // Ovdje trenutno unosim podatke\n        lastNumber(1096.6640076471413, 5000 + 71.15);\n    }, [])\n\n    const interestPerMounth = (interestRate, pmtt) => {\n        return (((interestRate / 100) / 12) * pmtt)\n    }\n\n    const currentMonth = () => {\n        var today = new Date();\n        return today.getMonth() + 1;\n    }\n\n    const currentYear = () => {\n        var today = new Date();\n        return today.getFullYear();\n    }\n\n    // const LastRowIndex = (loanMonths) => {\n    //     var lastRow;\n    //     payment = (parseFloat(payment) + parseFloat(addMonthlyPayment));\n    //     console.log('&&&&&&&&', payment);\n    //     payment = parseFloat(payment) + parseFloat(totalInterestVar);\n    //     var interest = interestPerMounth(interestRate, loanAmount);\n    //     var principal = (payment - interest);\n    //     var balance = (loanAmount - principal);\n    //     var totalInt = parseFloat(interest);\n    //     for (var i = 0; i < loanMonths; i++) {\n    //         interest = interestPerMounth(interestRate, balance);\n    //         totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n    //         principal = (payment - interest);\n    //         balance = (balance - principal);\n    //         if (interest < 0) {\n    //             break;\n    //         }\n    //         if (interest >= 0) {\n    //             lastRow++;\n    //         }\n    //     }\n    //     return lastRow;\n    // }\n\n    // var LastRow = 0;\n\n    const addTableRows = (loanMonths) => {\n        var tableRows = [];\n        var counter = currentMonth() + 1;\n        var counterYears = currentYear();\n        payment = (parseFloat(payment) + parseFloat(addMonthlyPayment));\n        console.log('&&&&&&&&', payment);\n        payment = parseFloat(payment) + parseFloat(totalInterestVar);\n        var interest = interestPerMounth(interestRate, loanAmount);\n        var principal = (payment - interest);\n        var balance = (loanAmount - principal);\n        var totalInt = parseFloat(interest);\n        for (var i = 0; i < loanMonths; i++) {\n            tableRows.push(\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 1]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${Number.isNaN(payment) === false ? parseFloat(payment).toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${Number.isNaN(principal) === false ? principal.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${Number.isNaN(interest) === false ? interest.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${Number.isNaN(totalInt) === false ? totalInt.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                </tr>\n            )\n            interest = interestPerMounth(interestRate, balance);\n            totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n            principal = (payment - interest);\n            balance = (balance - principal);\n            counter++;\n            if (interest < 0) {\n                break;\n            }\n            if (counter > 12) {\n                counter = 1;\n                counterYears += 1;\n            }\n            if (i === (loanMonths - 1)) {\n                totalInterestVar = + totalInt\n            }\n        }\n        return tableRows;\n    }\n\n    const rowsRender = () => {\n        return (\n            addTableRows(loanMonths)\n        )\n    }\n\n    const getDate = (yearsOrMonths) => {\n        var today = new Date();\n        let current = (today.getMonth() + 1) + '/' + (today.getDate()) + '/' + (today.getFullYear());\n        setCurrentDate(current);\n        if (yearsOrMonths === 'years') {\n            var future = new Date();\n            future.setFullYear(future.getFullYear() + loanYears);\n            setFutureDate((nameOfMonths[future.getMonth() + 1]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n        else if (yearsOrMonths === 'nan') {\n            // var today = new Date();\n            let fut = (nameOfMonths[today.getMonth()]) + ' ' + (today.getDate()) + ', ' + (today.getFullYear());\n            setFutureDate(fut);\n        }\n        else {\n            var future = new Date();\n            future.setMonth(future.getMonth() + loanMonths);\n            setFutureDate((nameOfMonths[future.getMonth()]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n    }\n\n    return (\n        <div className={styles.MainWrapper}>\n            <div className={styles.CentralWrapper}>\n                <div className={styles.Date}>\n                    <div className={styles.StartDateDiv}>\n                        <div className={styles.StartDateDivText}>\n                            Start Date\n                        </div>\n                        <div className={styles.StartDateDivInput}>\n                            <input type=\"text\" value={currentDate} disabled={true}></input>\n                        </div>\n                    </div>\n                    <div className={styles.EstimatedDate}>\n                        <div className={styles.EstimatedDateText}>\n                            Estimated Payoff Date\n                        </div>\n                        <div className={styles.EstimatedDateEnd}>\n                            {futureDate ? futureDate : currentDate}\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.Title}>\n                    Amortization Schedule\n                </div>\n                <div className={styles.Table}>\n                    <thead>\n                        <tr>\n                            <th className={styles.HeadOne}>Payment Date</th>\n                            <th className={styles.HeadTwo}>Payment</th>\n                            <th className={styles.HeadThree}>Principal</th>\n                            <th className={styles.HeadFour}>Interest</th>\n                            <th className={styles.HeadFive}>Total Interest</th>\n                            <th className={styles.HeadSix}>Balance</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowsRender()}\n                    </tbody>\n                </div>\n                <div className={styles.Print}>\n                    <div className={styles.PrintText}>\n                        Print Schedule\n                    </div>\n                    <div className={styles.PrintImage}>\n                        <img alt=\"Print\" src={logo} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmortizationSchedule;"]},"metadata":{},"sourceType":"module"}