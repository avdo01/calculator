{"ast":null,"code":"var _jsxFileName = \"/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { getMonthIndex, nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AmortizationSchedule = ({\n  loanYears,\n  loanMonths,\n  payment,\n  interestRate,\n  loanAmount,\n  addMonthlyPayment,\n  everyMounthAmount,\n  everyMounthIndex,\n  everyMounthName,\n  oneTimeAmount,\n  oneTimeMonth,\n  oneTimeYear\n}) => {\n  _s();\n\n  const [currentDate, setCurrentDate] = useState();\n  const [futureDate, setFutureDate] = useState(); // var lastArray = true;\n\n  var totalInterestVar = 0;\n  const nullVar = 0;\n  const currentMonthIndex = everyMounthIndex + 1;\n  var previousMonthIndex;\n\n  if (currentMonthIndex > 1) {\n    previousMonthIndex = currentMonthIndex - 1;\n  } else {\n    previousMonthIndex = 12;\n  } // console.log('INDEX OF MONTH', everyMounthIndex);\n  // console.log('AMOUNT', oneTimeAmount);\n  // console.log('INDEX OF MONTH', oneTimeMonth);\n  // console.log('INDEX OF YEAR', oneTimeYear);\n\n\n  useEffect(() => {\n    if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n      getDate('years');\n    } else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n      getDate('nan');\n    } else {\n      getDate('months');\n      addTableRows(loanMonths);\n    }\n\n    if (totalInterestVar !== 0) {// console.log('TOTAL INTEREST VAR', totalInterestVar);\n    }\n  }, [loanYears, loanMonths, totalInterestVar]); // useEffect(() => {\n  //     const lastNumber = (paymentt, pti) => {\n  //         var counter = 1;\n  //         for (var i = 0; i < loanMonths; i++) {\n  //             // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n  //             // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n  //             if ((pti - ((i + 1) * paymentt)).toFixed(2) > 0) {\n  //                 // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n  //                 counter++;\n  //             }\n  //         }\n  //         // console.log('COUNTER', counter)\n  //         // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n  //     }\n  //     lastNumber(1096.6640076471413, 5000 + 71.15);\n  // }, [])\n\n  const lastNumber = (paymentt, pti) => {\n    var counter = 1;\n\n    for (var i = 0; i < loanMonths; i++) {\n      // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n      // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n      if ((pti - (i + 1) * paymentt).toFixed(2) > 0) {\n        // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n        counter++;\n      }\n    }\n\n    console.log('COUNTER', counter); // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n  };\n\n  const interestPerMounth = (interestRate, pmtt) => {\n    return interestRate / 100 / 12 * pmtt;\n  };\n\n  const currentMonth = () => {\n    var today = new Date();\n    return today.getMonth() + 1;\n  };\n\n  const currentYear = () => {\n    var today = new Date();\n    return today.getFullYear();\n  };\n\n  const addTableRows = loanMonths => {\n    var tableRows = [];\n    var interestArray = [];\n    var balanceArray = [];\n    var totalInterestArray = [];\n    var counter = currentMonth() + 1;\n    var counterYears = currentYear(); // console.log('GODINA U PETLJI', counterYears);\n    // console.log('GODINA IZ ADD', oneTimeYear);\n    // console.log('MJESEC iz ADD', oneTimeMonth);\n\n    payment = parseFloat(payment) + parseFloat(addMonthlyPayment);\n    var interest = interestPerMounth(interestRate, loanAmount);\n    var principal = payment - interest;\n    var balance = loanAmount - principal;\n    var totalInt = parseFloat(interest);\n\n    for (var i = 0; i < loanMonths; i++) {\n      if (counterYears === oneTimeYear && counter === oneTimeMonth + 1) {\n        payment = parseFloat(payment) + parseFloat(oneTimeAmount);\n      }\n\n      if (counter === currentMonthIndex) {\n        payment = parseFloat(payment) + parseFloat(everyMounthAmount);\n      }\n\n      tableRows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: styles.TableRow,\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyOne,\n          children: [nameOfMonthsShortcut[counter - 1], \" \", counterYears]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyTwo,\n          children: [\"$\", Number.isNaN(payment) === false ? parseFloat(payment).toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyThree,\n          children: [\"$\", Number.isNaN(principal) === false ? principal.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyFour,\n          children: [\"$\", Number.isNaN(interest) === false ? interest.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodyFive,\n          children: [\"$\", Number.isNaN(totalInt) === false ? totalInt.toFixed(2) : nullVar.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: styles.BodySix,\n          children: [\"$\", balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this));\n\n      if (interest < 0) {\n        var lastPayment = balanceArray[balanceArray.length - 3] + parseFloat(interestArray[interestArray.length - 2]);\n        var lastPrincipal = balanceArray[balanceArray.length - 3];\n        var lastInterest = interestArray[interestArray.length - 2];\n        var lastTotalInterest = totalInterestArray[totalInterestArray.length - 3] + lastInterest; // console.log('totalInt', lastTotalInterest);\n        // console.log('lastPayment', lastPayment);\n        // console.log('lastPrincipal', lastPrincipal);\n        // console.log('----', parseFloat(interestArray[interestArray.length - 2]));\n        // console.log('---->', balanceArray[balanceArray.length - 3]);\n        // console.log('BBB', parseFloat(balanceArray[balanceArray.length - 3]) + parseFloat(interestArray[interestArray.length - 2]));\n\n        tableRows.pop(); // tableRows.pop();\n\n        tableRows[tableRows.length - 1] = /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: styles.TableRow,\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodyOne,\n            children: [nameOfMonthsShortcut[counter - 1], \" \", counterYears]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodyTwo,\n            children: [\"$\", lastPayment.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodyThree,\n            children: [\"$\", lastPrincipal.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodyFour,\n            children: [\"$\", lastInterest.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodyFive,\n            children: [\"$\", lastTotalInterest.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: styles.BodySix,\n            children: [\"$\", balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 51\n        }, this);\n        break;\n      }\n\n      if (counter === currentMonthIndex) {\n        payment = parseFloat(payment) - parseFloat(everyMounthAmount);\n      }\n\n      if (counterYears === oneTimeYear && counter === oneTimeMonth + 1) {\n        payment = parseFloat(payment) - parseFloat(oneTimeAmount);\n      }\n\n      interest = interestPerMounth(interestRate, balance);\n      totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n\n      if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n        payment = parseFloat(payment) + parseFloat(oneTimeAmount);\n      }\n\n      if (counter === previousMonthIndex) {\n        payment = parseFloat(payment) + parseFloat(everyMounthAmount);\n      }\n\n      principal = payment - interest;\n      balance = parseFloat(balance) - parseFloat(principal);\n\n      if (counter === previousMonthIndex) {\n        payment = parseFloat(payment) - parseFloat(everyMounthAmount);\n      }\n\n      if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n        payment = parseFloat(payment) - parseFloat(oneTimeAmount);\n      }\n\n      counter++;\n      interestArray.push(interest);\n      balanceArray.push(balance);\n      totalInterestArray.push(totalInt); // if (interest < 0) {\n      //     break;\n      // }\n\n      if (counter > 12) {\n        counter = 1;\n        counterYears += 1;\n      }\n    } // tableRows.splice(-1, 1);\n\n\n    return tableRows;\n  };\n\n  const rowsRender = () => {\n    return addTableRows(loanMonths);\n  };\n\n  const getDate = yearsOrMonths => {\n    var today = new Date();\n    let current = today.getMonth() + 1 + '/' + today.getDate() + '/' + today.getFullYear();\n    setCurrentDate(current);\n\n    if (yearsOrMonths === 'years') {\n      var future = new Date();\n      future.setFullYear(future.getFullYear() + loanYears);\n      setFutureDate(nameOfMonths[future.getMonth() + 1] + ' ' + future.getDate() + ', ' + future.getFullYear());\n    } else if (yearsOrMonths === 'nan') {\n      // var today = new Date();\n      let fut = nameOfMonths[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear();\n      setFutureDate(fut);\n    } else {\n      var future = new Date();\n      future.setMonth(future.getMonth() + loanMonths);\n      setFutureDate(nameOfMonths[future.getMonth()] + ' ' + future.getDate() + ', ' + future.getFullYear());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.MainWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CentralWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Date,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.StartDateDiv,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.StartDateDivText,\n            children: \"Start Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.StartDateDivInput,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: currentDate,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.EstimatedDate,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.EstimatedDateText,\n            children: \"Estimated Payoff Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.EstimatedDateEnd,\n            children: futureDate ? futureDate : currentDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Title,\n        children: \"Amortization Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadOne,\n              children: \"Payment Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadTwo,\n              children: \"Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadThree,\n              children: \"Principal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadFour,\n              children: \"Interest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadFive,\n              children: \"Total Interest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.HeadSix,\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rowsRender()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Print,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.PrintText,\n          children: \"Print Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.PrintImage,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Print\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AmortizationSchedule, \"Q+lH0wxSMNOgaCModxXXoCfidtc=\");\n\n_c = AmortizationSchedule;\nexport default AmortizationSchedule;\n\nvar _c;\n\n$RefreshReg$(_c, \"AmortizationSchedule\");","map":{"version":3,"sources":["/Users/ankora/Desktop/calc/calculator/src/components/AmortizationSchedule/AmortizationSchedule.js"],"names":["React","useState","useEffect","styles","logo","getMonthIndex","nameOfMonths","nameOfMonthsShortcut","AmortizationSchedule","loanYears","loanMonths","payment","interestRate","loanAmount","addMonthlyPayment","everyMounthAmount","everyMounthIndex","everyMounthName","oneTimeAmount","oneTimeMonth","oneTimeYear","currentDate","setCurrentDate","futureDate","setFutureDate","totalInterestVar","nullVar","currentMonthIndex","previousMonthIndex","Number","isInteger","getDate","isNaN","addTableRows","lastNumber","paymentt","pti","counter","i","toFixed","console","log","interestPerMounth","pmtt","currentMonth","today","Date","getMonth","currentYear","getFullYear","tableRows","interestArray","balanceArray","totalInterestArray","counterYears","parseFloat","interest","principal","balance","totalInt","push","TableRow","BodyOne","BodyTwo","BodyThree","BodyFour","BodyFive","BodySix","lastPayment","length","lastPrincipal","lastInterest","lastTotalInterest","pop","rowsRender","yearsOrMonths","current","future","setFullYear","fut","setMonth","MainWrapper","CentralWrapper","StartDateDiv","StartDateDivText","StartDateDivInput","EstimatedDate","EstimatedDateText","EstimatedDateEnd","Title","Table","HeadOne","HeadTwo","HeadThree","HeadFour","HeadFive","HeadSix","Print","PrintText","PrintImage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,oBAAtC,QAAkE,mBAAlE;;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA,OAAzB;AAAkCC,EAAAA,YAAlC;AAAgDC,EAAAA,UAAhD;AAA4DC,EAAAA,iBAA5D;AAA+EC,EAAAA,iBAA/E;AAAkGC,EAAAA,gBAAlG;AAAoHC,EAAAA,eAApH;AAAqIC,EAAAA,aAArI;AAAoJC,EAAAA,YAApJ;AAAkKC,EAAAA;AAAlK,CAAD,KAAqL;AAAA;;AAC9M,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,EAA9C;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,EAA5C,CAF8M,CAG9M;;AACA,MAAIwB,gBAAgB,GAAG,CAAvB;AACA,QAAMC,OAAO,GAAG,CAAhB;AACA,QAAMC,iBAAiB,GAAGX,gBAAgB,GAAG,CAA7C;AACA,MAAIY,kBAAJ;;AACA,MAAID,iBAAiB,GAAG,CAAxB,EAA2B;AACvBC,IAAAA,kBAAkB,GAAGD,iBAAiB,GAAG,CAAzC;AACH,GAFD,MAGK;AACDC,IAAAA,kBAAkB,GAAG,EAArB;AACH,GAb6M,CAc9M;AACA;AACA;AACA;;;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,MAAM,CAACC,SAAP,CAAiBrB,SAAjB,MAAgC,IAAhC,IAAwCoB,MAAM,CAACC,SAAP,CAAiBpB,UAAjB,MAAiC,KAAzE,KAAmFA,UAAU,KAAK,CAAf,IAAoBD,SAAS,KAAK,CAArH,CAAJ,EAA6H;AACzHsB,MAAAA,OAAO,CAAC,OAAD,CAAP;AACH,KAFD,MAGK,IAAIF,MAAM,CAACG,KAAP,CAAavB,SAAb,MAA4B,IAA5B,IAAoCoB,MAAM,CAACG,KAAP,CAAatB,UAAb,MAA6B,IAArE,EAA2E;AAC5EqB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH,KAFI,MAGA;AACDA,MAAAA,OAAO,CAAC,QAAD,CAAP;AACAE,MAAAA,YAAY,CAACvB,UAAD,CAAZ;AACH;;AACD,QAAIe,gBAAgB,KAAK,CAAzB,EAA4B,CACxB;AACH;AACJ,GAdQ,EAcN,CAAChB,SAAD,EAAYC,UAAZ,EAAwBe,gBAAxB,CAdM,CAAT,CAnB8M,CAmC9M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,UAAU,GAAG,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAClC,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,UAApB,EAAgC4B,CAAC,EAAjC,EAAqC;AACjC;AACA;AACA,UAAI,CAACF,GAAG,GAAI,CAACE,CAAC,GAAG,CAAL,IAAUH,QAAlB,EAA6BI,OAA7B,CAAqC,CAArC,IAA0C,CAA9C,EAAiD;AAC7C;AACAF,QAAAA,OAAO;AACV;AACJ;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,OAAvB,EAVkC,CAWlC;AACH,GAZD;;AAcA,QAAMK,iBAAiB,GAAG,CAAC9B,YAAD,EAAe+B,IAAf,KAAwB;AAC9C,WAAU/B,YAAY,GAAG,GAAhB,GAAuB,EAAxB,GAA8B+B,IAAtC;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,WAAOD,KAAK,CAACE,QAAN,KAAmB,CAA1B;AACH,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAIH,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,WAAOD,KAAK,CAACI,WAAN,EAAP;AACH,GAHD;;AAKA,QAAMhB,YAAY,GAAIvB,UAAD,IAAgB;AACjC,QAAIwC,SAAS,GAAG,EAAhB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIhB,OAAO,GAAGO,YAAY,KAAK,CAA/B;AACA,QAAIU,YAAY,GAAGN,WAAW,EAA9B,CANiC,CAOjC;AACA;AACA;;AACArC,IAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACzC,iBAAD,CAA3C;AACA,QAAI0C,QAAQ,GAAGd,iBAAiB,CAAC9B,YAAD,EAAeC,UAAf,CAAhC;AACA,QAAI4C,SAAS,GAAI9C,OAAO,GAAG6C,QAA3B;AACA,QAAIE,OAAO,GAAI7C,UAAU,GAAG4C,SAA5B;AACA,QAAIE,QAAQ,GAAGJ,UAAU,CAACC,QAAD,CAAzB;;AACA,SAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,UAApB,EAAgC4B,CAAC,EAAjC,EAAqC;AACjC,UAAIgB,YAAY,KAAKlC,WAAjB,IAAgCiB,OAAO,KAAKlB,YAAY,GAAG,CAA/D,EAAkE;AAC9DR,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACrC,aAAD,CAA3C;AACH;;AACD,UAAImB,OAAO,KAAKV,iBAAhB,EAAmC;AAC/BhB,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACxC,iBAAD,CAA3C;AACH;;AACDmC,MAAAA,SAAS,CAACU,IAAV,eACI;AAAI,QAAA,SAAS,EAAEzD,MAAM,CAAC0D,QAAtB;AAAA,gCACI;AAAI,UAAA,SAAS,EAAE1D,MAAM,CAAC2D,OAAtB;AAAA,qBAAgCvD,oBAAoB,CAAC8B,OAAO,GAAG,CAAX,CAApD,OAAoEiB,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,SAAS,EAAEnD,MAAM,CAAC4D,OAAtB;AAAA,0BAAiClC,MAAM,CAACG,KAAP,CAAarB,OAAb,MAA0B,KAA1B,GAAkC4C,UAAU,CAAC5C,OAAD,CAAV,CAAoB4B,OAApB,CAA4B,CAA5B,CAAlC,GAAmEb,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAI,UAAA,SAAS,EAAEpC,MAAM,CAAC6D,SAAtB;AAAA,0BAAmCnC,MAAM,CAACG,KAAP,CAAayB,SAAb,MAA4B,KAA5B,GAAoCA,SAAS,CAAClB,OAAV,CAAkB,CAAlB,CAApC,GAA2Db,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAI,UAAA,SAAS,EAAEpC,MAAM,CAAC8D,QAAtB;AAAA,0BAAkCpC,MAAM,CAACG,KAAP,CAAawB,QAAb,MAA2B,KAA3B,GAAmCA,QAAQ,CAACjB,OAAT,CAAiB,CAAjB,CAAnC,GAAyDb,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAA3F;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAI,UAAA,SAAS,EAAEpC,MAAM,CAAC+D,QAAtB;AAAA,0BAAkCrC,MAAM,CAACG,KAAP,CAAa2B,QAAb,MAA2B,KAA3B,GAAmCA,QAAQ,CAACpB,OAAT,CAAiB,CAAjB,CAAnC,GAAyDb,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAA3F;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAI,UAAA,SAAS,EAAEpC,MAAM,CAACgE,OAAtB;AAAA,0BAAiCT,OAAO,GAAG,CAAV,IAAe7B,MAAM,CAACG,KAAP,CAAa0B,OAAb,MAA0B,IAAzC,GAAgDhC,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAAhD,GAAqEmB,OAAO,CAACnB,OAAR,CAAgB,CAAhB,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;;AAWA,UAAIiB,QAAQ,GAAG,CAAf,EAAkB;AACd,YAAIY,WAAW,GAAGhB,YAAY,CAACA,YAAY,CAACiB,MAAb,GAAsB,CAAvB,CAAZ,GAAwCd,UAAU,CAACJ,aAAa,CAACA,aAAa,CAACkB,MAAd,GAAuB,CAAxB,CAAd,CAApE;AACA,YAAIC,aAAa,GAAGlB,YAAY,CAACA,YAAY,CAACiB,MAAb,GAAsB,CAAvB,CAAhC;AACA,YAAIE,YAAY,GAAGpB,aAAa,CAACA,aAAa,CAACkB,MAAd,GAAuB,CAAxB,CAAhC;AACA,YAAIG,iBAAiB,GAAGnB,kBAAkB,CAACA,kBAAkB,CAACgB,MAAnB,GAA4B,CAA7B,CAAlB,GAAoDE,YAA5E,CAJc,CAKd;AACA;AACA;AACA;AACA;AACA;;AACArB,QAAAA,SAAS,CAACuB,GAAV,GAXc,CAYd;;AACAvB,QAAAA,SAAS,CAACA,SAAS,CAACmB,MAAV,GAAmB,CAApB,CAAT,gBAAkC;AAAI,UAAA,SAAS,EAAElE,MAAM,CAAC0D,QAAtB;AAAA,kCAC9B;AAAI,YAAA,SAAS,EAAE1D,MAAM,CAAC2D,OAAtB;AAAA,uBAAgCvD,oBAAoB,CAAC8B,OAAO,GAAG,CAAX,CAApD,OAAoEiB,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAD8B,eAE9B;AAAI,YAAA,SAAS,EAAEnD,MAAM,CAAC4D,OAAtB;AAAA,4BAAiCK,WAAW,CAAC7B,OAAZ,CAAoB,CAApB,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF8B,eAG9B;AAAI,YAAA,SAAS,EAAEpC,MAAM,CAAC6D,SAAtB;AAAA,4BAAmCM,aAAa,CAAC/B,OAAd,CAAsB,CAAtB,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAH8B,eAI9B;AAAI,YAAA,SAAS,EAAEpC,MAAM,CAAC8D,QAAtB;AAAA,4BAAkCM,YAAY,CAAChC,OAAb,CAAqB,CAArB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJ8B,eAK9B;AAAI,YAAA,SAAS,EAAEpC,MAAM,CAAC+D,QAAtB;AAAA,4BAAkCM,iBAAiB,CAACjC,OAAlB,CAA0B,CAA1B,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAL8B,eAM9B;AAAI,YAAA,SAAS,EAAEpC,MAAM,CAACgE,OAAtB;AAAA,4BAAiCT,OAAO,GAAG,CAAV,IAAe7B,MAAM,CAACG,KAAP,CAAa0B,OAAb,MAA0B,IAAzC,GAAgDhC,OAAO,CAACa,OAAR,CAAgB,CAAhB,CAAhD,GAAqEmB,OAAO,CAACnB,OAAR,CAAgB,CAAhB,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA,kBAN8B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlC;AAQA;AACH;;AACD,UAAIF,OAAO,KAAKV,iBAAhB,EAAmC;AAC/BhB,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACxC,iBAAD,CAA3C;AACH;;AACD,UAAIuC,YAAY,KAAKlC,WAAjB,IAAgCiB,OAAO,KAAKlB,YAAY,GAAG,CAA/D,EAAkE;AAC9DR,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACrC,aAAD,CAA3C;AACH;;AACDsC,MAAAA,QAAQ,GAAGd,iBAAiB,CAAC9B,YAAD,EAAe8C,OAAf,CAA5B;AACAC,MAAAA,QAAQ,GAAGJ,UAAU,CAACA,UAAU,CAACI,QAAD,CAAV,GAAuBJ,UAAU,CAACC,QAAD,CAAlC,CAArB;;AACA,UAAIF,YAAY,KAAKlC,WAAjB,IAAgCiB,OAAO,KAAKlB,YAAhD,EAA8D;AAC1DR,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACrC,aAAD,CAA3C;AACH;;AACD,UAAImB,OAAO,KAAKT,kBAAhB,EAAoC;AAChCjB,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACxC,iBAAD,CAA3C;AACH;;AACD0C,MAAAA,SAAS,GAAI9C,OAAO,GAAG6C,QAAvB;AACAE,MAAAA,OAAO,GAAIH,UAAU,CAACG,OAAD,CAAV,GAAsBH,UAAU,CAACE,SAAD,CAA3C;;AACA,UAAIpB,OAAO,KAAKT,kBAAhB,EAAoC;AAChCjB,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACxC,iBAAD,CAA3C;AACH;;AACD,UAAIuC,YAAY,KAAKlC,WAAjB,IAAgCiB,OAAO,KAAKlB,YAAhD,EAA8D;AAC1DR,QAAAA,OAAO,GAAI4C,UAAU,CAAC5C,OAAD,CAAV,GAAsB4C,UAAU,CAACrC,aAAD,CAA3C;AACH;;AACDmB,MAAAA,OAAO;AACPc,MAAAA,aAAa,CAACS,IAAd,CAAmBJ,QAAnB;AACAJ,MAAAA,YAAY,CAACQ,IAAb,CAAkBF,OAAlB;AACAL,MAAAA,kBAAkB,CAACO,IAAnB,CAAwBD,QAAxB,EAlEiC,CAmEjC;AACA;AACA;;AACA,UAAItB,OAAO,GAAG,EAAd,EAAkB;AACdA,QAAAA,OAAO,GAAG,CAAV;AACAiB,QAAAA,YAAY,IAAI,CAAhB;AACH;AACJ,KAzFgC,CA0FjC;;;AACA,WAAOJ,SAAP;AACH,GA5FD;;AA8FA,QAAMwB,UAAU,GAAG,MAAM;AACrB,WACIzC,YAAY,CAACvB,UAAD,CADhB;AAGH,GAJD;;AAMA,QAAMqB,OAAO,GAAI4C,aAAD,IAAmB;AAC/B,QAAI9B,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAI8B,OAAO,GAAI/B,KAAK,CAACE,QAAN,KAAmB,CAApB,GAAyB,GAAzB,GAAgCF,KAAK,CAACd,OAAN,EAAhC,GAAmD,GAAnD,GAA0Dc,KAAK,CAACI,WAAN,EAAxE;AACA3B,IAAAA,cAAc,CAACsD,OAAD,CAAd;;AACA,QAAID,aAAa,KAAK,OAAtB,EAA+B;AAC3B,UAAIE,MAAM,GAAG,IAAI/B,IAAJ,EAAb;AACA+B,MAAAA,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAAC5B,WAAP,KAAuBxC,SAA1C;AACAe,MAAAA,aAAa,CAAElB,YAAY,CAACuE,MAAM,CAAC9B,QAAP,KAAoB,CAArB,CAAb,GAAwC,GAAxC,GAA+C8B,MAAM,CAAC9C,OAAP,EAA/C,GAAmE,IAAnE,GAA2E8C,MAAM,CAAC5B,WAAP,EAA5E,CAAb;AACH,KAJD,MAKK,IAAI0B,aAAa,KAAK,KAAtB,EAA6B;AAC9B;AACA,UAAII,GAAG,GAAIzE,YAAY,CAACuC,KAAK,CAACE,QAAN,EAAD,CAAb,GAAmC,GAAnC,GAA0CF,KAAK,CAACd,OAAN,EAA1C,GAA6D,IAA7D,GAAqEc,KAAK,CAACI,WAAN,EAA/E;AACAzB,MAAAA,aAAa,CAACuD,GAAD,CAAb;AACH,KAJI,MAKA;AACD,UAAIF,MAAM,GAAG,IAAI/B,IAAJ,EAAb;AACA+B,MAAAA,MAAM,CAACG,QAAP,CAAgBH,MAAM,CAAC9B,QAAP,KAAoBrC,UAApC;AACAc,MAAAA,aAAa,CAAElB,YAAY,CAACuE,MAAM,CAAC9B,QAAP,EAAD,CAAb,GAAoC,GAApC,GAA2C8B,MAAM,CAAC9C,OAAP,EAA3C,GAA+D,IAA/D,GAAuE8C,MAAM,CAAC5B,WAAP,EAAxE,CAAb;AACH;AACJ,GAnBD;;AAqBA,sBACI;AAAK,IAAA,SAAS,EAAE9C,MAAM,CAAC8E,WAAvB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAE9E,MAAM,CAAC+E,cAAvB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAE/E,MAAM,CAAC2C,IAAvB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAE3C,MAAM,CAACgF,YAAvB;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEhF,MAAM,CAACiF,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAK,YAAA,SAAS,EAAEjF,MAAM,CAACkF,iBAAvB;AAAA,mCACI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,KAAK,EAAEhE,WAA1B;AAAuC,cAAA,QAAQ,EAAE;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eASI;AAAK,UAAA,SAAS,EAAElB,MAAM,CAACmF,aAAvB;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEnF,MAAM,CAACoF,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAK,YAAA,SAAS,EAAEpF,MAAM,CAACqF,gBAAvB;AAAA,sBACKjE,UAAU,GAAGA,UAAH,GAAgBF;AAD/B;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAmBI;AAAK,QAAA,SAAS,EAAElB,MAAM,CAACsF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,eAsBI;AAAK,QAAA,SAAS,EAAEtF,MAAM,CAACuF,KAAvB;AAAA,gCACI;AAAA,iCACI;AAAA,oCACI;AAAI,cAAA,SAAS,EAAEvF,MAAM,CAACwF,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAI,cAAA,SAAS,EAAExF,MAAM,CAACyF,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAI,cAAA,SAAS,EAAEzF,MAAM,CAAC0F,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAI,cAAA,SAAS,EAAE1F,MAAM,CAAC2F,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAI,cAAA,SAAS,EAAE3F,MAAM,CAAC4F,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAI,cAAA,SAAS,EAAE5F,MAAM,CAAC6F,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI;AAAA,oBACKtB,UAAU;AADf;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAqCI;AAAK,QAAA,SAAS,EAAEvE,MAAM,CAAC8F,KAAvB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAE9F,MAAM,CAAC+F,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAE/F,MAAM,CAACgG,UAAvB;AAAA,iCACI;AAAK,YAAA,GAAG,EAAC,OAAT;AAAiB,YAAA,GAAG,EAAE/F;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cArCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkDH,CA3PD;;GAAMI,oB;;KAAAA,oB;AA6PN,eAAeA,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './AmortizationSchedule.module.css';\nimport logo from '../photos/forPrint.png';\nimport { getMonthIndex, nameOfMonths, nameOfMonthsShortcut } from '../Mocks/mockData';\n\nconst AmortizationSchedule = ({ loanYears, loanMonths, payment, interestRate, loanAmount, addMonthlyPayment, everyMounthAmount, everyMounthIndex, everyMounthName, oneTimeAmount, oneTimeMonth, oneTimeYear }) => {\n    const [currentDate, setCurrentDate] = useState();\n    const [futureDate, setFutureDate] = useState();\n    // var lastArray = true;\n    var totalInterestVar = 0;\n    const nullVar = 0;\n    const currentMonthIndex = everyMounthIndex + 1;\n    var previousMonthIndex;\n    if (currentMonthIndex > 1) {\n        previousMonthIndex = currentMonthIndex - 1;\n    }\n    else {\n        previousMonthIndex = 12;\n    }\n    // console.log('INDEX OF MONTH', everyMounthIndex);\n    // console.log('AMOUNT', oneTimeAmount);\n    // console.log('INDEX OF MONTH', oneTimeMonth);\n    // console.log('INDEX OF YEAR', oneTimeYear);\n\n    useEffect(() => {\n        if (Number.isInteger(loanYears) === true && Number.isInteger(loanMonths) === false && (loanMonths !== 0 || loanYears !== 0)) {\n            getDate('years');\n        }\n        else if (Number.isNaN(loanYears) === true || Number.isNaN(loanMonths) === true) {\n            getDate('nan');\n        }\n        else {\n            getDate('months');\n            addTableRows(loanMonths);\n        }\n        if (totalInterestVar !== 0) {\n            // console.log('TOTAL INTEREST VAR', totalInterestVar);\n        }\n    }, [loanYears, loanMonths, totalInterestVar]);\n\n    // useEffect(() => {\n    //     const lastNumber = (paymentt, pti) => {\n    //         var counter = 1;\n    //         for (var i = 0; i < loanMonths; i++) {\n    //             // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n    //             // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n    //             if ((pti - ((i + 1) * paymentt)).toFixed(2) > 0) {\n    //                 // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n    //                 counter++;\n    //             }\n    //         }\n    //         // console.log('COUNTER', counter)\n    //         // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n    //     }\n    //     lastNumber(1096.6640076471413, 5000 + 71.15);\n    // }, [])\n\n    const lastNumber = (paymentt, pti) => {\n        var counter = 1;\n        for (var i = 0; i < loanMonths; i++) {\n            // console.log('variable', ((i + 1) * paymentt).toFixed(2));\n            // console.log('my', (pti - ((i + 1) * paymentt)).toFixed(2));\n            if ((pti - ((i + 1) * paymentt)).toFixed(2) > 0) {\n                // console.log('KONACNA', (pti - ((i + 1) * paymentt)).toFixed(2));\n                counter++;\n            }\n        }\n        console.log('COUNTER', counter)\n        // console.log('Last interest', (((interestRate / 100) / 12) * 358.34).toFixed(2));\n    }\n\n    const interestPerMounth = (interestRate, pmtt) => {\n        return (((interestRate / 100) / 12) * pmtt)\n    }\n\n    const currentMonth = () => {\n        var today = new Date();\n        return today.getMonth() + 1;\n    }\n\n    const currentYear = () => {\n        var today = new Date();\n        return today.getFullYear();\n    }\n\n    const addTableRows = (loanMonths) => {\n        var tableRows = [];\n        var interestArray = [];\n        var balanceArray = [];\n        var totalInterestArray = [];\n        var counter = currentMonth() + 1;\n        var counterYears = currentYear();\n        // console.log('GODINA U PETLJI', counterYears);\n        // console.log('GODINA IZ ADD', oneTimeYear);\n        // console.log('MJESEC iz ADD', oneTimeMonth);\n        payment = (parseFloat(payment) + parseFloat(addMonthlyPayment));\n        var interest = interestPerMounth(interestRate, loanAmount);\n        var principal = (payment - interest);\n        var balance = (loanAmount - principal);\n        var totalInt = parseFloat(interest);\n        for (var i = 0; i < loanMonths; i++) {\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1) {\n                payment = (parseFloat(payment) + parseFloat(oneTimeAmount));\n            }\n            if (counter === currentMonthIndex) {\n                payment = (parseFloat(payment) + parseFloat(everyMounthAmount));\n            }\n            tableRows.push(\n                <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 1]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${Number.isNaN(payment) === false ? parseFloat(payment).toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${Number.isNaN(principal) === false ? principal.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${Number.isNaN(interest) === false ? interest.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${Number.isNaN(totalInt) === false ? totalInt.toFixed(2) : nullVar.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                    {/* <th>{counter}</th> */}\n                </tr>\n            )\n            if (interest < 0) {\n                var lastPayment = balanceArray[balanceArray.length - 3] + parseFloat(interestArray[interestArray.length - 2]);\n                var lastPrincipal = balanceArray[balanceArray.length - 3];\n                var lastInterest = interestArray[interestArray.length - 2];\n                var lastTotalInterest = totalInterestArray[totalInterestArray.length - 3] + lastInterest;\n                // console.log('totalInt', lastTotalInterest);\n                // console.log('lastPayment', lastPayment);\n                // console.log('lastPrincipal', lastPrincipal);\n                // console.log('----', parseFloat(interestArray[interestArray.length - 2]));\n                // console.log('---->', balanceArray[balanceArray.length - 3]);\n                // console.log('BBB', parseFloat(balanceArray[balanceArray.length - 3]) + parseFloat(interestArray[interestArray.length - 2]));\n                tableRows.pop();\n                // tableRows.pop();\n                tableRows[tableRows.length - 1] = <tr className={styles.TableRow}>\n                    <th className={styles.BodyOne}>{nameOfMonthsShortcut[counter - 1]} {counterYears}</th>\n                    <th className={styles.BodyTwo}>${lastPayment.toFixed(2)}</th>\n                    <th className={styles.BodyThree}>${lastPrincipal.toFixed(2)}</th>\n                    <th className={styles.BodyFour}>${lastInterest.toFixed(2)}</th>\n                    <th className={styles.BodyFive}>${lastTotalInterest.toFixed(2)}</th>\n                    <th className={styles.BodySix}>${balance < 0 || Number.isNaN(balance) === true ? nullVar.toFixed(2) : balance.toFixed(2)}</th>\n                </tr>;\n                break;\n            }\n            if (counter === currentMonthIndex) {\n                payment = (parseFloat(payment) - parseFloat(everyMounthAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth + 1) {\n                payment = (parseFloat(payment) - parseFloat(oneTimeAmount));\n            }\n            interest = interestPerMounth(interestRate, balance);\n            totalInt = parseFloat(parseFloat(totalInt) + parseFloat(interest));\n            if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n                payment = (parseFloat(payment) + parseFloat(oneTimeAmount));\n            }\n            if (counter === previousMonthIndex) {\n                payment = (parseFloat(payment) + parseFloat(everyMounthAmount));\n            }\n            principal = (payment - interest);\n            balance = (parseFloat(balance) - parseFloat(principal));\n            if (counter === previousMonthIndex) {\n                payment = (parseFloat(payment) - parseFloat(everyMounthAmount));\n            }\n            if (counterYears === oneTimeYear && counter === oneTimeMonth) {\n                payment = (parseFloat(payment) - parseFloat(oneTimeAmount));\n            }\n            counter++;\n            interestArray.push(interest);\n            balanceArray.push(balance);\n            totalInterestArray.push(totalInt);\n            // if (interest < 0) {\n            //     break;\n            // }\n            if (counter > 12) {\n                counter = 1;\n                counterYears += 1;\n            }\n        }\n        // tableRows.splice(-1, 1);\n        return tableRows;\n    }\n\n    const rowsRender = () => {\n        return (\n            addTableRows(loanMonths)\n        )\n    }\n\n    const getDate = (yearsOrMonths) => {\n        var today = new Date();\n        let current = (today.getMonth() + 1) + '/' + (today.getDate()) + '/' + (today.getFullYear());\n        setCurrentDate(current);\n        if (yearsOrMonths === 'years') {\n            var future = new Date();\n            future.setFullYear(future.getFullYear() + loanYears);\n            setFutureDate((nameOfMonths[future.getMonth() + 1]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n        else if (yearsOrMonths === 'nan') {\n            // var today = new Date();\n            let fut = (nameOfMonths[today.getMonth()]) + ' ' + (today.getDate()) + ', ' + (today.getFullYear());\n            setFutureDate(fut);\n        }\n        else {\n            var future = new Date();\n            future.setMonth(future.getMonth() + loanMonths);\n            setFutureDate((nameOfMonths[future.getMonth()]) + ' ' + (future.getDate()) + ', ' + (future.getFullYear()));\n        }\n    }\n\n    return (\n        <div className={styles.MainWrapper}>\n            <div className={styles.CentralWrapper}>\n                <div className={styles.Date}>\n                    <div className={styles.StartDateDiv}>\n                        <div className={styles.StartDateDivText}>\n                            Start Date\n                        </div>\n                        <div className={styles.StartDateDivInput}>\n                            <input type=\"text\" value={currentDate} disabled={true}></input>\n                        </div>\n                    </div>\n                    <div className={styles.EstimatedDate}>\n                        <div className={styles.EstimatedDateText}>\n                            Estimated Payoff Date\n                        </div>\n                        <div className={styles.EstimatedDateEnd}>\n                            {futureDate ? futureDate : currentDate}\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.Title}>\n                    Amortization Schedule\n                </div>\n                <div className={styles.Table}>\n                    <thead>\n                        <tr>\n                            <th className={styles.HeadOne}>Payment Date</th>\n                            <th className={styles.HeadTwo}>Payment</th>\n                            <th className={styles.HeadThree}>Principal</th>\n                            <th className={styles.HeadFour}>Interest</th>\n                            <th className={styles.HeadFive}>Total Interest</th>\n                            <th className={styles.HeadSix}>Balance</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rowsRender()}\n                    </tbody>\n                </div>\n                <div className={styles.Print}>\n                    <div className={styles.PrintText}>\n                        Print Schedule\n                    </div>\n                    <div className={styles.PrintImage}>\n                        <img alt=\"Print\" src={logo} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmortizationSchedule;"]},"metadata":{},"sourceType":"module"}